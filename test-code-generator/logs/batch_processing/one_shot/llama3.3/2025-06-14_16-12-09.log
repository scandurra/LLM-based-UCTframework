2025-06-14 16:12:09,193 - __main__ - INFO - Found 1 dependencies for use case UC3.4.5
2025-06-14 16:12:09,193 - __main__ - INFO - Read previously generated functions code for use case UC3.4 - test case UC3.4_TC1
2025-06-14 16:12:09,193 - __main__ - INFO - Read previously generated spec code for use case UC3.4 - test case UC3.4_TC1
2025-06-14 16:12:09,193 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-14 16:12:09,193 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-14 16:12:09,194 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/one_shot/llama3.3/previous_code_section.txt
2025-06-14 16:12:09,194 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
// File: report_energetici_page.js
export class ReportEnergeticiPage {  
    constructor(page) {
        this.page = page;
        this.fromDateInput = page.locator("#from-date");
        this.toDateInput = page.locator("#to-date");
        this.exportFormatSelect = page.locator("#export-format");
        this.exportButton = page.locator("#export-button");
    }
  
    async selectFromDate(date) {
        await this.fromDateInput.fill(date);
    }
  
    async selectToDate(date) {
        await this.toDateInput.fill(date);
    }
  
    // format can be 'csv' or 'pdf'
    async selectExportFormat(format) {
        await this.exportFormatSelect.selectOption(format);
    }

    async isExportButtonEnabled() {
        return !(await this.exportButton.isDisabled());
    }
  
    async clickExportButton() {
        return await this.exportButton.click();
    }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';
import { LoginPage } from '../../models/page_object_models/login_page.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const navigateToLoginPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.goto(process.env.E2E_LOGIN_URL);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
    }
}

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
    await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Insert correct credentials', 'Credentials accepted', 'Credentials accepted', true, `E2E_LOGIN_EMAIL_ADMIN: ${process.env.E2E_LOGIN_EMAIL_ADMIN}, E2E_LOGIN_PASSWORD_ADMIN: ${process.env.E2E_LOGIN_PASSWORD_ADMIN}`, executionTime);
    }
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.login();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Click login button', 'System proceeds with authentication', 'System proceeds with authentication', true, '', executionTime);
    }
}

export const verifySuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    const message = await loginPage.getErrorMessage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID4', 'Verify success message', 'Success message displayed', message, message !== null, '', executionTime);
    }

    await expect(message).not.toBeNull();
}

// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    await navigateToLoginPage(page, reporter);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC8.2.3_TC1
Title: Esportazione report in PDF con dati validi
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file esportato viene scaricato correttamente
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido e il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Download del file
Expected: Il file PDF viene generato e scaricato

Test Case ID: UC8.2.3_TC2
Title: Esportazione report in PDF con periodo non valido
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo non valido, con data da minore di data a e seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Test Case ID: UC8.2.3_TC3
Title: Esportazione report in PDF con formato non selezionato
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido ma non seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC8.2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-05-30";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const exportFile = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  await reportEnergeticiPage.clickExportButton();
  await page.on('download', download => download.path().then(passFail = 1));
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il file viene scaricato correttamente" : "Errore nello scaricare il file",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectWrongPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-04-01";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const tryToClickButton = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  let testPass = await reportEnergeticiPage.isExportButtonEnabled();
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il pulsante è non cliccabile correttamente" : "Il pulsante è cliccabile",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectPeriodAndFormat, exportFile } from './UC8.2.3_TC1.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC1 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC1", "Esportazione report in PDF con dati validi");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectPeriodAndFormat(page, reporter);
  await exportFile(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```

### UC8.2.3_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectWrongPeriodAndFormat, tryToClickButton } from './UC8.2.3_TC2.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC2 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC2", "Esportazione report in PDF con periodo non valido");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectWrongPeriodAndFormat(page, reporter);
  await tryToClickButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
File: census_sheet_page.js
const { timeout } = require('../../playwright.config');

export class CensusSheetPage {
  constructor(page) {
    this.page = page;
    this.path = require('path');
    
    // Locators
    this.searchInput = page.getByPlaceholder('Cerca');
    this.uploadButton = page.locator('#modal_upload_censustechsheet_btn');
    this.fileInput = page.locator('input[type="file"]');
    this.okButton = page.getByRole('button', { name: 'OK' });
    this.actionDropdown = page.locator('.text-start > .btn').first();
    this.downloadOption = page.locator('[data-kt-cts-table-filter="download_row"]').first();
    this.deleteOption = page.locator('[data-kt-cts-table-filter="delete_row"]').first();
    this.editOption = page.locator('[data-kt-cts-table-filter="edit_row"]').first();
    this.detailOption = page.locator('a[data-kt-cts-table-filter="detail_row"]').first();
    this.freezeOption = page.locator('a[data-action="freeze"]').first();
    this.confirmDeleteButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first();
    this.cancelDeleteButton = page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first();
    this.confirmButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first();
    
    // Column headers
    this.azioniColumn = page.getByLabel('Azioni');
    this.schedaColumn = page.getByLabel('Scheda: attiva per ordinare');
    this.proprietarioColumn = page.getByLabel('Proprietario: attiva per');
    this.comuneColumn = page.getByLabel('Comune: attiva per ordinare');
    this.statsColumn = page.getByLabel('Stats: attiva per ordinare la');
    this.statoColumn = page.getByLabel('Stato: attiva per ordinare la');
    this.infoColumn = page.getByLabel('Info: attiva per ordinare la');
    this.creazioneColumn = page.getByLabel('Creazione: attiva per');
    this.aggiornamentoColumn = page.getByLabel('Aggiornamento: attiva per');
    this.sottomissioneColumn = page.getByLabel('Sottomissione: attiva per');
  }

  async clickAzioniColumn() {
    await this.azioniColumn.click({timeout: 300000});
  }

  async clickSchedaColumn() {
    await this.schedaColumn.click({timeout: 300000});
  }

  async clickProprietarioColumn() {
    await this.proprietarioColumn.click({timeout: 300000});
  }

  async clickComuneColumn() {
    await this.comuneColumn.click({timeout: 300000});
  }

  async clickStatsColumn() {
    await this.statsColumn.click({timeout: 300000});
  }

  async clickStatoColumn() {
    await this.statoColumn.click({timeout: 300000});
  }

  async clickInfoColumn() {
    await this.infoColumn.click({timeout: 300000});
  }

  async clickCreazioneColumn() {
    await this.creazioneColumn.click({timeout: 300000});
  }

  async clickAggiornamentoColumn() {
    await this.aggiornamentoColumn.click({timeout: 300000});
  }

  async clickSottomissioneColumn() {
    await this.sottomissioneColumn.click({timeout: 300000});
  }

  async searchByName(name = 'Lucania') {
    await this.page.getByPlaceholder('Cerca').click();
    await this.page.getByPlaceholder('Cerca').fill(name);
    await this.page.getByPlaceholder('Cerca').press('Enter');
  }

  async clickAzioniButton() {
    await this.page.locator('.text-start > .btn').first().waitFor({ state: 'visible' });

    // Ora possiamo cliccare sul pulsante
    await this.page.locator('.text-start > .btn').first().click();
  }

  async clickAzioneDownload() {
    await this.page.locator('[data-kt-cts-table-filter="download_row"]').first().click();
  }

  async clickAzioneDelete() {
    await this.page.locator('[data-kt-cts-table-filter="delete_row"]').first().click();
  }

  async clickConfirmAzioneDelete() {
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickCancelAzioneDelete() {
    await this.page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickAzioneEdit() {
    await this.page.locator('[data-kt-cts-table-filter="edit_row"]').first().click();
  }

  async clickAzioneCongela() {
    await this.page.locator('a[data-action="freeze"]').first().click();
  }

  async clickAzioneDettaglio() {
    await this.page.locator('a[data-kt-cts-table-filter="detail_row"]').first().click();
  }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC3.4_TC1.functions.js
import { test, expect } from '@playwright/test';

import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from '../UC3/UC3_TC1.functions.js';

import TestResultReporter from '../../models/test-result-reporter.js';

export const accessCensusSheetSection = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessPlatformAndAuthenticate(page, null);
  await selectCensusSheetMenu(page, null);
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4_TC1_ID1', 'Accedi alla sezione delle schede censimento', 'La lista delle schede censimento è visibile', 'La lista delle schede censimento è visibile', true, {}, executionTime);
  }
}

export const clickAzioniButton = async function(page, reporter) {
  const startTime = new Date().getTime();
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioniButton();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4_TC1_ID2', 'Clicca sul tasto azioni di una scheda censimento', 'Viene visualizzata la palette di operazioni disponibili', 'La palette di operazioni è visibile', true, {}, executionTime);
  }
}
// File: UC3.4_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessCensusSheetSection, clickAzioniButton } from './UC3.4_TC1.functions.js';

test("UC3.4_TC1 - Visualizzazione azioni disponibili sulla scheda censimento", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4_TC1", "Visualizzazione azioni disponibili sulla scheda censimento");

  await page.goto(process.env.E2E_LOGIN_URL);

  await accessCensusSheetSection(page, reporter);
  await clickAzioniButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC3.4.5_TC1
Title: Visualizzazione dettaglio scheda censimento con dati validi
Use Case ID: UC3.4.5
Priority: Alta
Type: Positivo
Preconditions: UC3.4
Postconditions: L’utente visualizza le informazioni relative alla scheda censimento
Test Steps:
  1. Step: Seleziona l’operazione di dettaglio su una scheda esistente
Expected: La pagina di dettaglio si apre correttamente
  2. Step: Verifica la presenza dei dati generali dell’area e della gerarchia dei POD e Aree Omogenee
Expected: Tutti i dati richiesti sono visualizzati correttamente
  3. Step: Prova a navigare nella gerarchia dei POD e Aree Omogenee
Expected: La navigazione avviene senza errori

Test Case ID: UC3.4.5_TC2
Title: Tentativo di modifica dei dati in pagina di dettaglio
Use Case ID: UC3.4.5
Priority: Media
Type: Negativo
Preconditions: UC3.4
Postconditions: L’utente non può modificare i dati
Test Steps:
  1. Step: Apri la pagina di dettaglio di una scheda censimento
Expected: La pagina si apre in modalità sola lettura
  2. Step: Tenta di modificare un campo dei dati generali dell’area
Expected: Il sistema non permette la modifica e visualizza un messaggio di errore
  3. Step: Verifica che non ci siano opzioni di editing disponibili
Expected: Non sono presenti pulsanti o link per modificare i dati

Test Case ID: UC3.4.5_TC3
Title: Visualizzazione dettaglio scheda censimento con dati mancanti
Use Case ID: UC3.4.5
Priority: Media
Type: Negativo
Preconditions: UC3.4
Postconditions: L’utente visualizza un messaggio di dati non disponibili
Test Steps:
  1. Step: Seleziona l’operazione di dettaglio su una scheda con dati parziali o mancanti
Expected: La pagina di dettaglio si apre ma segnala la mancanza di informazioni
  2. Step: Verifica la presenza di un messaggio che indica la mancanza di dati
Expected: Il messaggio è chiaro e visibile all’utente
  3. Step: Controlla se sono presenti link o opzioni per aggiungere i dati mancanti
Expected: Sono disponibili opzioni per aggiungere o completare le informazioni

Test Case ID: UC3.4.5_TC4
Title: Navigazione nella gerarchia dei POD e Aree Omogenee
Use Case ID: UC3.4.5
Priority: Alta
Type: Positivo
Preconditions: UC3.4
Postconditions: L’utente naviga correttamente nella gerarchia
Test Steps:
  1. Step: Apri la pagina di dettaglio di una scheda censimento
Expected: La gerarchia dei POD e Aree Omogenee è visibile
  2. Step: Seleziona un nodo della gerarchia per visualizzare i dettagli
Expected: I dettagli del nodo selezionato sono visualizzati correttamente
  3. Step: Prova a tornare indietro nella gerarchia e selezionare un altro nodo
Expected: La navigazione avviene senza errori e i dati sono coerenti

Test Case ID: UC3.4.5_TC5
Title: Boundary test: selezione di un nodo gerarchico non esistente
Use Case ID: UC3.4.5
Priority: Media
Type: Boundary
Preconditions: UC3.4
Postconditions: L’utente visualizza un messaggio di errore
Test Steps:
  1. Step: Apri la pagina di dettaglio di una scheda censimento
Expected: La gerarchia dei POD e Aree Omogenee è visibile
  2. Step: Inserisci manualmente un ID o percorso non valido nella URL per accedere a un nodo non esistente
Expected: Il sistema visualizza un messaggio di errore indicando che il nodo non esiste
  3. Step: Verifica che non ci siano dati visualizzati relativi al nodo inesistente
Expected: Non sono presenti informazioni relative al nodo

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-14 16:12:09,194 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-14 16:26:11,762 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-14 16:26:11,762 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 842565337133 time, with 3416 tokens in prompt and 3535 tokens in response. Content:
 ### UC3.4.5_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const selectDettaglioOperation = async function(page, reporter) {
  const startTime = new Date().getTime();
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneDettaglio();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC1_ID1', 'Seleziona l’operazione di dettaglio su una scheda esistente', 'La pagina di dettaglio si apre correttamente', 'La pagina di dettaglio è visibile', true, {}, executionTime);
  }
}

export const verifyGeneralData = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to verify general data
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC1_ID2', 'Verifica la presenza dei dati generali dell’area e della gerarchia dei POD e Aree Omogenee', 'Tutti i dati richiesti sono visualizzati correttamente', 'I dati generali sono visibili', true, {}, executionTime);
  }
}

export const navigateHierarchy = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to navigate hierarchy
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC1_ID3', 'Prova a navigare nella gerarchia dei POD e Aree Omogenee', 'La navigazione avviene senza errori', 'La navigazione è possibile', true, {}, executionTime);
  }
}
```

### UC3.4.5_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import { selectDettaglioOperation, verifyGeneralData, navigateHierarchy } from './UC3.4.5_TC1.functions.js';

test("UC3.4.5_TC1 - Visualizzazione dettaglio scheda censimento con dati validi", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.5_TC1", "Visualizzazione dettaglio scheda censimento con dati validi");

  await accessCensusSheetSection(page, reporter);

  await selectDettaglioOperation(page, reporter);
  await verifyGeneralData(page, reporter);
  await navigateHierarchy(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.4.5_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const openDettaglioPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessCensusSheetSection(page, null);
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneDettaglio();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC2_ID1', 'Apri la pagina di dettaglio di una scheda censimento', 'La pagina si apre in modalità sola lettura', 'La pagina è visibile', true, {}, executionTime);
  }
}

export const tryModifyField = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to try modify field
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC2_ID2', 'Tenta di modificare un campo dei dati generali dell’area', 'Il sistema non permette la modifica e visualizza un messaggio di errore', 'La modifica non è possibile', true, {}, executionTime);
  }
}

export const verifyNoEditingOptions = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to verify no editing options
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC2_ID3', 'Verifica che non ci siano opzioni di editing disponibili', 'Non sono presenti pulsanti o link per modificare i dati', 'Nessuna opzione di editing è visibile', true, {}, executionTime);
  }
}
```

### UC3.4.5_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import { openDettaglioPage, tryModifyField, verifyNoEditingOptions } from './UC3.4.5_TC2.functions.js';

test("UC3.4.5_TC2 - Tentativo di modifica dei dati in pagina di dettaglio", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.5_TC2", "Tentativo di modifica dei dati in pagina di dettaglio");

  await openDettaglioPage(page, reporter);

  await tryModifyField(page, reporter);
  await verifyNoEditingOptions(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.4.5_TC3.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const selectDettaglioOperationWithMissingData = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessCensusSheetSection(page, null);
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneDettaglio();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC3_ID1', 'Seleziona l’operazione di dettaglio su una scheda con dati parziali o mancanti', 'La pagina di dettaglio si apre ma segnala la mancanza di informazioni', 'La pagina è visibile', true, {}, executionTime);
  }
}

export const verifyMessageForMissingData = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to verify message for missing data
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC3_ID2', 'Verifica la presenza di un messaggio che indica la mancanza di dati', 'Il messaggio è chiaro e visibile all’utente', 'Il messaggio è visibile', true, {}, executionTime);
  }
}

export const verifyOptionsToAddMissingData = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to verify options to add missing data
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC3_ID3', 'Controlla se sono presenti link o opzioni per aggiungere i dati mancanti', 'Sono disponibili opzioni per aggiungere o completare le informazioni', 'Opzioni per aggiungere dati sono visibili', true, {}, executionTime);
  }
}
```

### UC3.4.5_TC3.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import { selectDettaglioOperationWithMissingData, verifyMessageForMissingData, verifyOptionsToAddMissingData } from './UC3.4.5_TC3.functions.js';

test("UC3.4.5_TC3 - Visualizzazione dettaglio scheda censimento con dati mancanti", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.5_TC3", "Visualizzazione dettaglio scheda censimento con dati mancanti");

  await selectDettaglioOperationWithMissingData(page, reporter);

  await verifyMessageForMissingData(page, reporter);
  await verifyOptionsToAddMissingData(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.4.5_TC4.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const openDettaglioPageWithHierarchy = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessCensusSheetSection(page, null);
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneDettaglio();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC4_ID1', 'Apri la pagina di dettaglio di una scheda censimento', 'La gerarchia dei POD e Aree Omogenee è visibile', 'La gerarchia è visibile', true, {}, executionTime);
  }
}

export const selectNodeInHierarchy = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to select node in hierarchy
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC4_ID2', 'Seleziona un nodo della gerarchia per visualizzare i dettagli', 'I dettagli del nodo selezionato sono visualizzati correttamente', 'I dettagli del nodo sono visibili', true, {}, executionTime);
  }
}

export const navigateBackInHierarchy = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to navigate back in hierarchy
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC4_ID3', 'Prova a tornare indietro nella gerarchia e selezionare un altro nodo', 'La navigazione avviene senza errori e i dati sono coerenti', 'La navigazione è possibile', true, {}, executionTime);
  }
}
```

### UC3.4.5_TC4.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import { openDettaglioPageWithHierarchy, selectNodeInHierarchy, navigateBackInHierarchy } from './UC3.4.5_TC4.functions.js';

test("UC3.4.5_TC4 - Navigazione nella gerarchia dei POD e Aree Omogenee", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.5_TC4", "Navigazione nella gerarchia dei POD e Aree Omogenee");

  await openDettaglioPageWithHierarchy(page, reporter);

  await selectNodeInHierarchy(page, reporter);
  await navigateBackInHierarchy(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.4.5_TC5.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const openDettaglioPageWithInvalidNode = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessCensusSheetSection(page, null);
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneDettaglio();
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC5_ID1', 'Apri la pagina di dettaglio di una scheda censimento con un nodo non valido', 'La pagina visualizza un messaggio di errore', 'Il messaggio di errore è visibile', true, {}, executionTime);
  }
}

export const verifyErrorMessage = async function(page, reporter) {
  const startTime = new Date().getTime();
  // Implement logic to verify error message
  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
    reporter.addStep('UC3.4.5_TC5_ID2', 'Verifica che il messaggio di errore sia corretto', 'Il messaggio di errore è chiaro e visibile all’utente', 'Il messaggio di errore è visibile', true, {}, executionTime);
  }
}
```

### UC3.4.5_TC5.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3/UC3_TC1.functions.js';
import { openDettaglioPageWithInvalidNode, verifyErrorMessage } from './UC3.4.5_TC5.functions.js';

test("UC3.4.5_TC5 - Gestione di un nodo non valido nella gerarchia dei POD e Aree Omogenee", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.5_TC5", "Gestione di un nodo non valido nella gerarchia dei POD e Aree Omogenee");

  await openDettaglioPageWithInvalidNode(page, reporter);

  await verifyErrorMessage(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-06-14 16:26:11,763 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
