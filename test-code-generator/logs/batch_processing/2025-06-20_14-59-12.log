2025-06-20 14:59:12,409 - __main__ - INFO - Found 1 dependencies for use case UC2.3
2025-06-20 14:59:12,409 - __main__ - INFO - Read previously generated functions code for use case UC2 - test case UC2_TC1
2025-06-20 14:59:12,409 - __main__ - INFO - Read previously generated spec code for use case UC2 - test case UC2_TC1
2025-06-20 14:59:12,410 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-20 14:59:12,410 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-20 14:59:12,410 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/few_shot/llama3.3/previous_code_section.txt
2025-06-20 14:59:12,410 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
// File: support_page.js
export class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    // Category values: 'missing_credentials', 'other', 
    async selectIssueCategory(category) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.spec.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.spec.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza inviata con successo
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Test Case ID: UC10_T2
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza inserendo un indirizzo email non valido
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Viene mostrato un messaggio di errore

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC10_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
export const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "missing_credentials";
  const description = "Non riesco più ad accedere al mio account";
  const email = process.env.EMAIL;
  await supportPage.selectIssueCategory(category);
  await supportPage.enterIssueDescription(description);
  await supportPage.enterEmail(email);
  let endTime = Date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID2','L\'utente compila la form di assistenza', `Form compilata`, `Form compilata`, true, { category, description, email }, endTime - startTime );
  }
}

// Step 3
export const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID3', 'Invia richiesta di assistenza', "L'utente viene reindirizzato alla pagina di avvenuto invio", testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto", testPass, {}, endTime - startTime);
  }

  expect(passFail).toBeTruthy();
}
```

### UC10_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
export const fillSupportFormWithWrongEmail = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "missing_credentials";
  const description = "Non riesco più ad accedere al mio account";
  const email = "wrong email field";
  await supportPage.selectIssueCategory(category);
  await supportPage.enterIssueDescription(description);
  await supportPage.enterEmail(email);
  let endTime = Date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID2','L\'utente compila la form di assistenza', `Form compilata`, `Form compilata`, true, { category, description, email }, endTime - startTime );
  }
}

// Step 3
export const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await supportPage.waitForErrorMessage();
  let testPass = await supportPage.getErrorMessage() != '';
  endTime = date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID3', 'Invia richiesta di assistenza', "Viene mostrato all'utente un messaggio di errore", testPass ? "Viene mostrato all'utente un messaggio di errore" : "Nessun messaggio mostrato", testPass, {}, endTime - startTime);
  }

  expect(passFail).toBeTruthy();
}
```

### UC10_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToSupportPage, fillSupportForm, submitForm } import './UC10_TC1.functions.js';

const reporter = new TestResultReporter();

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1", "Invio richiesta di assistenza");

  await navigateToSupportPage(page, reporter);
  await fillSupportForm(page, reporter);
  await submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
```

### UC10_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToSupportPage, fillSupportFormWithWrongEmail, submitForm } import './UC10_TC2.functions.js';

const reporter = new TestResultReporter();

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1", "Invio richiesta di assistenza");

  await navigateToSupportPage(page, reporter);
  await fillSupportFormWithWrongEmail(page, reporter);
  await submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
```
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
// File: report_energetici_page.js
export class ReportEnergeticiPage {  
    constructor(page) {
        this.page = page;
        this.fromDateInput = page.locator("#from-date");
        this.toDateInput = page.locator("#to-date");
        this.exportFormatSelect = page.locator("#export-format");
        this.exportButton = page.locator("#export-button");
    }
  
    async selectFromDate(date) {
        await this.fromDateInput.fill(date);
    }
  
    async selectToDate(date) {
        await this.toDateInput.fill(date);
    }
  
    // format can be 'csv' or 'pdf'
    async selectExportFormat(format) {
        await this.exportFormatSelect.selectOption(format);
    }

    async isExportButtonEnabled() {
        return !(await this.exportButton.isDisabled());
    }
  
    async clickExportButton() {
        return await this.exportButton.click();
    }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';
import { LoginPage } from '../../models/page_object_models/login_page.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const navigateToLoginPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.goto(process.env.E2E_LOGIN_URL);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
    }
}

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
    await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Insert correct credentials', 'Credentials accepted', 'Credentials accepted', true, `E2E_LOGIN_EMAIL_ADMIN: ${process.env.E2E_LOGIN_EMAIL_ADMIN}, E2E_LOGIN_PASSWORD_ADMIN: ${process.env.E2E_LOGIN_PASSWORD_ADMIN}`, executionTime);
    }
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.login();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Click login button', 'System proceeds with authentication', 'System proceeds with authentication', true, '', executionTime);
    }
}

export const verifySuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    const message = await loginPage.getErrorMessage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID4', 'Verify success message', 'Success message displayed', message, message !== null, '', executionTime);
    }

    await expect(message).not.toBeNull();
}

// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    await navigateToLoginPage(page, reporter);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC8.2.3_TC1
Title: Esportazione report in PDF con dati validi
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file esportato viene scaricato correttamente
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido e il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Download del file
Expected: Il file PDF viene generato e scaricato

Test Case ID: UC8.2.3_TC2
Title: Esportazione report in PDF con periodo non valido
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo non valido, con data da minore di data a e seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Test Case ID: UC8.2.3_TC3
Title: Esportazione report in PDF con formato non selezionato
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido ma non seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC8.2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-05-30";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const exportFile = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  await reportEnergeticiPage.clickExportButton();
  await page.on('download', download => download.path().then(passFail = 1));
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il file viene scaricato correttamente" : "Errore nello scaricare il file",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectWrongPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-04-01";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const tryToClickButton = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  let testPass = await reportEnergeticiPage.isExportButtonEnabled();
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il pulsante è non cliccabile correttamente" : "Il pulsante è cliccabile",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectPeriodAndFormat, exportFile } from './UC8.2.3_TC1.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC1 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC1", "Esportazione report in PDF con dati validi");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectPeriodAndFormat(page, reporter);
  await exportFile(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```

### UC8.2.3_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectWrongPeriodAndFormat, tryToClickButton } from './UC8.2.3_TC2.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC2 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC2", "Esportazione report in PDF con periodo non valido");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectWrongPeriodAndFormat(page, reporter);
  await tryToClickButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
File: dashboard_page_general_data_table.js
export class DashboardPageGeneralDataTable {
  constructor(page) {
    this.page = page;
    
    // Table navigation selectors
    this.generalDataTable = this.page.getByText('Tabella Dati generaliNessun datoLoading...ComuneRegioneN° di Punti LuceConsumo');
    this.nextButton = this.page.getByLabel('Successivo');
    this.pageOneLink = this.page.getByRole('link', { name: '1' });
    this.elementsDropdown = this.page.getByLabel('Mostra 102550100 elementi');
    this.regionSortButton = this.page.getByLabel('Regione: attiva per ordinare');
    this.pointsLightSortButton = this.page.getByLabel('N° di Punti Luce: attiva per');
  }

  async getTableContent() {
    const content = await this.generalDataTable.allTextContents();
    return content[0];
  }

  async navigateToNextPage() {
    await this.nextButton.click();
  }

  async navigateToPageOne() {
    await this.pageOneLink.click();
  }

  async changeElementsPerPage(value = '25') {
    await this.elementsDropdown.selectOption(value);
  }

  async sortByRegion() {
    await this.regionSortButton.click();
  }

  async sortByPointsOfLight() {
    await this.pointsLightSortButton.click();
  }

  async isTableVisible() {
    return await this.generalDataTable.isVisible();
  }

  async isNextButtonVisible() {
    return await this.nextButton.isVisible();
  }

  async isElementsDropdownVisible() {
    return await this.elementsDropdown.isVisible();
  }

  async isSortButtonsVisible() {
    const regionVisible = await this.regionSortButton.isVisible();
    const pointsVisible = await this.pointsLightSortButton.isVisible();
    return regionVisible && pointsVisible;
  }
}

```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC2_TC1.functions.js
import { test, expect } from '@playwright/test';

import { SidebarPage } from '../../models/page_object_models/sidebar_page.js';

import TestResultReporter from '../../models/test-result-reporter.js';

import { insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js';

export const accessPlatformAsRegisteredUser = async function(page, reporter) {
  const startTime = new Date().getTime();
  
  await insertCorrectCredentials(page, reporter);
  await clickLoginButton(page, reporter);
  await verifySuccessMessage(page, reporter);

  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
      reporter.addStep('UC2_TC1_ID1', 'Accedi alla piattaforma come utente registrato', 'La home page della piattaforma è visibile', 'L\'utente è stato autenticato correttamente', true, {}, executionTime);
  }

  expect(page.url()).toBe(process.env.E2E_HOME_URL);
}

export const selectDashboardMenu = async function(page, reporter) {
  const sidebarPage = new SidebarPage(page);
  const startTime = new Date().getTime();
  
  await sidebarPage.clickDashboardMenu();

  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
      reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù relativa alla dashboard', 'La sezione della dashboard si apre correttamente', 'La dashboard è stata selezionata correttamente', true, {}, executionTime);
  }

  expect(page.url()).toContain('dashboard');
}
// File: UC2_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({page, browserName}) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC1", "Apertura della dashboard con utente autorizzato");

  await page.goto(process.env.E2E_LOGIN_URL);

  await accessPlatformAsRegisteredUser(page, reporter);
  await selectDashboardMenu(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });     
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC2.3_TC1
Title: Visualizzazione tabella dati generali con impostazioni predefinite
Use Case ID: UC2.3
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard tramite il menù apposito
Expected: La sezione dashboard viene visualizzata correttamente
  2. Step: Scorri nella pagina fino a visualizzare la sezione tabellare dedicata ai dati generali
Expected: La tabella dei dati generali è visibile e contiene le informazioni attese
  3. Step: Verifica che sia possibile scorrere tra i comuni disponibili e modificare gli elementi visualizzati per pagina
Expected: Le funzionalità di scrolling e selezione del numero di elementi per pagina funzionano correttamente

Test Case ID: UC2.3_TC2
Title: Visualizzazione tabella dati generali con ordinamento personalizzato
Use Case ID: UC2.3
Priority: Media
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali
Expected: La tabella è visibile
  2. Step: Clicca sul nome di una colonna per ordinare i dati
Expected: I dati vengono ordinati correttamente secondo la colonna selezionata
  3. Step: Verifica che l’ordinamento funzioni anche con più clic (ascendente e discendente)
Expected: L’ordinamento dei dati si alterna correttamente tra ascendente e discendente

Test Case ID: UC2.3_TC3
Title: Visualizzazione tabella dati generali con selezione di comune non disponibile
Use Case ID: UC2.3
Priority: Media
Type: Negativo
Preconditions: UC2
Postconditions: L’utente visualizza un messaggio di errore o una pagina non trovata
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali
Expected: La tabella è visibile
  2. Step: Seleziona un comune che non esiste o non è disponibile
Expected: Il sistema visualizza un messaggio di errore o una pagina di default per comuni non trovati
  3. Step: Verifica che il messaggio di errore sia chiaro e utile per l’utente
Expected: Il messaggio di errore fornisce informazioni utili all’utente su come procedere

Test Case ID: UC2.3_TC4
Title: Visualizzazione tabella dati generali con numero di elementi per pagina non valido
Use Case ID: UC2.3
Priority: Bassa
Type: Negativo
Preconditions: UC2
Postconditions: L’utente visualizza un messaggio di errore o una pagina con impostazioni predefinite
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali
Expected: La tabella è visibile
  2. Step: Inserisci un numero di elementi per pagina non valido (ad esempio, un valore alfanumerico)
Expected: Il sistema visualizza un messaggio di errore o reimposta il numero di elementi per pagina alle impostazioni predefinite
  3. Step: Verifica che il sistema gestisca correttamente l’input non valido
Expected: Il sistema si comporta come atteso in caso di input non valido

Test Case ID: UC2.3_TC5
Title: Visualizzazione tabella dati generali con ordinamento su più colonne
Use Case ID: UC2.3
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali
Expected: La tabella è visibile
  2. Step: Clicca su più colonne per ordinare i dati in base a più criteri
Expected: I dati vengono ordinati correttamente secondo le colonne selezionate
  3. Step: Verifica che l’ordinamento funzioni come atteso anche con più clic
Expected: L’ordinamento dei dati si alterna correttamente tra ascendente e discendente per ogni colonna selezionata

Test Case ID: UC2.3_TC6
Title: Visualizzazione tabella dati generali con selezione rapida di comuni
Use Case ID: UC2.3
Priority: Media
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali
Expected: La tabella è visibile
  2. Step: Utilizza la funzionalità di selezione rapida per passare direttamente a un comune specifico
Expected: Il sistema visualizza i dati del comune selezionato
  3. Step: Verifica che la funzionalità di selezione rapida funzioni correttamente e sia utile
Expected: La funzionalità di selezione rapida è facile da usare e risparmia tempo all’utente

Test Case ID: UC2.3_TC7
Title: Visualizzazione tabella dati generali con accessibilità per utenti disabili
Use Case ID: UC2.3
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali utilizzando strumenti di accessibilità (ad esempio, lettore dello schermo)
Expected: La tabella è accessibile e leggibile
  2. Step: Verifica che tutte le funzionalità della tabella siano accessibili
Expected: Tutte le funzionalità sono accessibili e utilizzabili anche con strumenti di accessibilità
  3. Step: Controlla che il sito web sia conforme agli standard di accessibilità (WCAG 2.1)
Expected: Il sito web soddisfa gli standard di accessibilità richiesti

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-20 14:59:12,410 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-20 15:07:57,249 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-20 15:07:57,250 - test_code_generator.llm_client.ollama_client - INFO - model='llama3.3:latest' created_at='2025-06-20T15:07:57.249126831Z' done=True done_reason='stop' total_duration=524837044087 load_duration=13492479 prompt_eval_count=3137 prompt_eval_duration=9223648966 eval_count=3974 eval_duration=515593606571 message=Message(role='assistant', content='### UC2.3_TC1.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { DashboardPageGeneralDataTable } from \'../../models/page_object_models/dashboard_page_general_data_table.js\';\nimport { accessPlatformAsRegisteredUser, selectDashboardMenu } from \'./UC2_TC1.functions.js\';\n\nexport const accessDashboardSection = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await selectDashboardMenu(page, null);\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC1_ID1\', \'Accedi alla sezione dashboard tramite il menù apposito\', \'La sezione dashboard viene visualizzata correttamente\', \'La sezione dashboard è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(page.url()).toContain(\'dashboard\');\n}\n\nexport const scrollUntilTableVisible = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await page.waitForSelector(\'#general-data-table\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC1_ID2\', \'Scorri nella pagina fino a visualizzare la sezione tabellare dedicata ai dati generali\', \'La tabella dei dati generali è visibile e contiene le informazioni attese\', \'La tabella dei dati generali è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n}\n\nexport const verifyScrollingAndElementSelection = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const dashboardPageGeneralDataTable = new DashboardPageGeneralDataTable(page);\n  await dashboardPageGeneralDataTable.navigateToNextPage();\n  await dashboardPageGeneralDataTable.changeElementsPerPage(\'50\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC1_ID3\', \'Verifica che sia possibile scorrere tra i comuni disponibili e modificare gli elementi visualizzati per pagina\', \'Le funzionalità di scrolling e selezione del numero di elementi per pagina funzionano correttamente\', \'Le funzionalità di scrolling e selezione del numero di elementi per pagina sono state verificate\', true, {}, executionTime);\n  }\n\n  expect(await dashboardPageGeneralDataTable.isNextButtonVisible()).toBeTruthy();\n  expect(await dashboardPageGeneralDataTable.isElementsDropdownVisible()).toBeTruthy();\n}\n```\n\n### UC2.3_TC1.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAsRegisteredUser } from \'./UC2_TC1.functions.js\';\nimport { accessDashboardSection, scrollUntilTableVisible, verifyScrollingAndElementSelection } from \'./UC2.3_TC1.functions.js\';\n\ntest("UC2.3_TC1 - Visualizzazione tabella dati generali con impostazioni predefinite", async ({page, browserName}) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC2.3_TC1", "Visualizzazione tabella dati generali con impostazioni predefinite");\n\n  await page.goto(process.env.E2E_LOGIN_URL);\n\n  await accessPlatformAsRegisteredUser(page, reporter);\n  await accessDashboardSection(page, reporter);\n  await scrollUntilTableVisible(page, reporter);\n  await verifyScrollingAndElementSelection(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC2.3_TC2.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { DashboardPageGeneralDataTable } from \'../../models/page_object_models/dashboard_page_general_data_table.js\';\nimport { accessPlatformAsRegisteredUser, selectDashboardMenu } from \'./UC2_TC1.functions.js\';\n\nexport const accessAndScrollToTable = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await selectDashboardMenu(page, null);\n  await page.waitForSelector(\'#general-data-table\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC2_ID1\', \'Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali\', \'La tabella è visibile\', \'La tabella è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n}\n\nexport const clickOnColumnsToSort = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const dashboardPageGeneralDataTable = new DashboardPageGeneralDataTable(page);\n  await dashboardPageGeneralDataTable.sortByColumn(\'Comune\');\n  await dashboardPageGeneralDataTable.sortByColumn(\'Consumo\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC2_ID2\', \'Clicca su più colonne per ordinare i dati in base a più criteri\', \'I dati vengono ordinati correttamente secondo le colonne selezionate\', \'I dati sono stati ordinati\', true, {}, executionTime);\n  }\n\n  expect(await dashboardPageGeneralDataTable.getTableData()).not.toBeNull();\n}\n\nexport const verifySortingFunctionality = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const dashboardPageGeneralDataTable = new DashboardPageGeneralDataTable(page);\n  await dashboardPageGeneralDataTable.sortByColumn(\'Comune\', \'desc\');\n  await dashboardPageGeneralDataTable.sortByColumn(\'Consumo\', \'asc\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC2_ID3\', \'Verifica che l\\\'ordinamento funzioni come atteso anche con più clic\', \'L\\\'ordinamento dei dati si alterna correttamente tra ascendente e discendente per ogni colonna selezionata\', \'L\\\'ordinamento è stato verificato\', true, {}, executionTime);\n  }\n\n  expect(await dashboardPageGeneralDataTable.getTableData()).not.toBeNull();\n}\n```\n\n### UC2.3_TC2.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAsRegisteredUser } from \'./UC2_TC1.functions.js\';\nimport { accessAndScrollToTable, clickOnColumnsToSort, verifySortingFunctionality } from \'./UC2.3_TC2.functions.js\';\n\ntest("UC2.3_TC2 - Visualizzazione tabella dati generali con ordinamento su colonne", async ({page, browserName}) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC2.3_TC2", "Visualizzazione tabella dati generali con ordinamento su colonne");\n\n  await page.goto(process.env.E2E_LOGIN_URL);\n\n  await accessPlatformAsRegisteredUser(page, reporter);\n  await accessAndScrollToTable(page, reporter);\n  await clickOnColumnsToSort(page, reporter);\n  await verifySortingFunctionality(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC2.3_TC3.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { DashboardPageGeneralDataTable } from \'../../models/page_object_models/dashboard_page_general_data_table.js\';\nimport { accessPlatformAsRegisteredUser, selectDashboardMenu } from \'./UC2_TC1.functions.js\';\n\nexport const accessAndScrollToTableNonExistingComune = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await selectDashboardMenu(page, null);\n  await page.waitForSelector(\'#general-data-table\');\n  await page.selectOption(\'#comune-select\', \'Non Esistente\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC3_ID1\', \'Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali\', \'La tabella è visibile\', \'La tabella è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n}\n\nexport const verifyErrorMessage = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const errorMessage = await page.textContent(\'.error-message\');\n  expect(errorMessage).toContain(\'Comune non esistente\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC3_ID2\', \'Verifica che il messaggio di errore sia chiaro e utile per l\\\'utente\', \'Il messaggio di errore fornisce informazioni utili all\\\'utente su come procedere\', \'Il messaggio di errore è stato verificato\', true, {}, executionTime);\n  }\n}\n\nexport const verifyDefaultPage = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  expect(await page.isVisible(\'#default-page\')).toBeTruthy();\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC3_ID3\', \'Verifica che il sistema visualizza un messaggio di errore o una pagina di default per comuni non trovati\', \'Il sistema visualizza un messaggio di errore o una pagina di default\', \'La pagina di default è stata visualizzata\', true, {}, executionTime);\n  }\n}\n```\n\n### UC2.3_TC3.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAsRegisteredUser } from \'./UC2_TC1.functions.js\';\nimport { accessAndScrollToTableNonExistingComune, verifyErrorMessage, verifyDefaultPage } from \'./UC2.3_TC3.functions.js\';\n\ntest("UC2.3_TC3 - Visualizzazione tabella dati generali con selezione di comuni non esistenti", async ({page, browserName}) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC2.3_TC3", "Visualizzazione tabella dati generali con selezione di comuni non esistenti");\n\n  await page.goto(process.env.E2E_LOGIN_URL);\n\n  await accessPlatformAsRegisteredUser(page, reporter);\n  await accessAndScrollToTableNonExistingComune(page, reporter);\n  await verifyErrorMessage(page, reporter);\n  await verifyDefaultPage(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC2.3_TC4.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { DashboardPageGeneralDataTable } from \'../../models/page_object_models/dashboard_page_general_data_table.js\';\nimport { accessPlatformAsRegisteredUser, selectDashboardMenu } from \'./UC2_TC1.functions.js\';\n\nexport const accessAndScrollToTableInvalidElementsPerPage = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await selectDashboardMenu(page, null);\n  await page.waitForSelector(\'#general-data-table\');\n  await page.selectOption(\'#elements-per-page-select\', \'abc\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC4_ID1\', \'Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali\', \'La tabella è visibile\', \'La tabella è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n}\n\nexport const verifyErrorMessageInvalidElementsPerPage = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const errorMessage = await page.textContent(\'.error-message\');\n  expect(errorMessage).toContain(\'Numero di elementi per pagina non valido\');\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC4_ID2\', \'Verifica che il messaggio di errore sia chiaro e utile per l\\\'utente\', \'Il messaggio di errore fornisce informazioni utili all\\\'utente su come procedere\', \'Il messaggio di errore è stato verificato\', true, {}, executionTime);\n  }\n}\n\nexport const verifyDefaultElementsPerPage = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  expect(await page.isVisible(\'#default-elements-per-page\')).toBeTruthy();\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC4_ID3\', \'Verifica che il sistema gestisca correttamente l\\\'input non valido\', \'Il sistema si comporta come atteso in caso di input non valido\', \'Il sistema ha gestito l\\\'input non valido\', true, {}, executionTime);\n  }\n}\n```\n\n### UC2.3_TC4.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAsRegisteredUser } from \'./UC2_TC1.functions.js\';\nimport { accessAndScrollToTableInvalidElementsPerPage, verifyErrorMessageInvalidElementsPerPage, verifyDefaultElementsPerPage } from \'./UC2.3_TC4.functions.js\';\n\ntest("UC2.3_TC4 - Visualizzazione tabella dati generali con numero di elementi per pagina non valido", async ({page, browserName}) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC2.3_TC4", "Visualizzazione tabella dati generali con numero di elementi per pagina non valido");\n\n  await page.goto(process.env.E2E_LOGIN_URL);\n\n  await accessPlatformAsRegisteredUser(page, reporter);\n  await accessAndScrollToTableInvalidElementsPerPage(page, reporter);\n  await verifyErrorMessageInvalidElementsPerPage(page, reporter);\n  await verifyDefaultElementsPerPage(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC2.3_TC5.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { DashboardPageGeneralDataTable } from \'../../models/page_object_models/dashboard_page_general_data_table.js\';\nimport { accessPlatformAsRegisteredUser, selectDashboardMenu } from \'./UC2_TC1.functions.js\';\n\nexport const accessAndScrollToTableMultipleColumnsSorting = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  await selectDashboardMenu(page, null);\n  await page.waitForSelector(\'#general-data-table\');\n  await page.selectOption(\'#columns-select\', [\'Comune\', \'Consumo\']);\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC5_ID1\', \'Accedi alla sezione dashboard e scorri fino alla tabella dei dati generali\', \'La tabella è visibile\', \'La tabella è stata visualizzata\', true, {}, executionTime);\n  }\n\n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n}\n\nexport const verifyMultipleColumnsSorting = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  const sortedData = await page.evaluate(() => {\n    const tableData = document.querySelectorAll(\'#general-data-table tbody tr\');\n    return Array.prototype.map.call(tableData, (row) => {\n      return Array.prototype.map.call(row.querySelectorAll(\'td\'), (cell) => cell.textContent);\n    });\n  });\n\n  expect(sortedData).not.toBeNull();\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC5_ID2\', \'Verifica che l\\\'ordinamento funzioni correttamente su più colonne\', \'L\\\'ordinamento dei dati si alterna correttamente tra ascendente e discendente per ogni colonna selezionata\', \'L\\\'ordinamento è stato verificato\', true, {}, executionTime);\n  }\n}\n\nexport const verifyTableData = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  \n  expect(await page.isVisible(\'#general-data-table\')).toBeTruthy();\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n  if (reporter) {\n      reporter.addStep(\'UC2.3_TC5_ID3\', \'Verifica che la tabella dei dati generali sia visualizzata correttamente\', \'La tabella è visibile e contiene i dati attesi\', \'La tabella è stata verificata\', true, {}, executionTime);\n  }\n}\n```\n\n### UC2.3_TC5.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAsRegisteredUser } from \'./UC2_TC1.functions.js\';\nimport { accessAndScrollToTableMultipleColumnsSorting, verifyMultipleColumnsSorting, verifyTableData } from \'./UC2.3_TC5.functions.js\';\n\ntest("UC2.3_TC5 - Visualizzazione tabella dati generali con ordinamento su più colonne", async ({page, browserName}) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC2.3_TC5", "Visualizzazione tabella dati generali con ordinamento su più colonne");\n\n  await page.goto(process.env.E2E_LOGIN_URL);\n\n  await accessPlatformAsRegisteredUser(page, reporter);\n  await accessAndScrollToTableMultipleColumnsSorting(page, reporter);\n  await verifyMultipleColumnsSorting(page, reporter);\n  await verifyTableData(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });     \n});\n```', images=None, tool_calls=None)
2025-06-20 15:07:57,250 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
