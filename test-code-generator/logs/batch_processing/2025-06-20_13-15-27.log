2025-06-20 13:15:27,992 - __main__ - INFO - Found 1 dependencies for use case UC3.2
2025-06-20 13:15:27,992 - __main__ - INFO - Read previously generated functions code for use case UC3 - test case UC3_TC1
2025-06-20 13:15:27,992 - __main__ - INFO - Read previously generated spec code for use case UC3 - test case UC3_TC1
2025-06-20 13:15:27,992 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-20 13:15:27,992 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-20 13:15:27,992 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/one_shot/llama3.3/previous_code_section.txt
2025-06-20 13:15:27,992 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
// File: report_energetici_page.js
export class ReportEnergeticiPage {  
    constructor(page) {
        this.page = page;
        this.fromDateInput = page.locator("#from-date");
        this.toDateInput = page.locator("#to-date");
        this.exportFormatSelect = page.locator("#export-format");
        this.exportButton = page.locator("#export-button");
    }
  
    async selectFromDate(date) {
        await this.fromDateInput.fill(date);
    }
  
    async selectToDate(date) {
        await this.toDateInput.fill(date);
    }
  
    // format can be 'csv' or 'pdf'
    async selectExportFormat(format) {
        await this.exportFormatSelect.selectOption(format);
    }

    async isExportButtonEnabled() {
        return !(await this.exportButton.isDisabled());
    }
  
    async clickExportButton() {
        return await this.exportButton.click();
    }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';
import { LoginPage } from '../../models/page_object_models/login_page.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const navigateToLoginPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.goto(process.env.E2E_LOGIN_URL);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
    }
}

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
    await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Insert correct credentials', 'Credentials accepted', 'Credentials accepted', true, `E2E_LOGIN_EMAIL_ADMIN: ${process.env.E2E_LOGIN_EMAIL_ADMIN}, E2E_LOGIN_PASSWORD_ADMIN: ${process.env.E2E_LOGIN_PASSWORD_ADMIN}`, executionTime);
    }
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.login();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Click login button', 'System proceeds with authentication', 'System proceeds with authentication', true, '', executionTime);
    }
}

export const verifySuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    const message = await loginPage.getErrorMessage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID4', 'Verify success message', 'Success message displayed', message, message !== null, '', executionTime);
    }

    await expect(message).not.toBeNull();
}

// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    await navigateToLoginPage(page, reporter);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");
    
    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC8.2.3_TC1
Title: Esportazione report in PDF con dati validi
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file esportato viene scaricato correttamente
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido e il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Download del file
Expected: Il file PDF viene generato e scaricato

Test Case ID: UC8.2.3_TC2
Title: Esportazione report in PDF con periodo non valido
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo non valido, con data da minore di data a e seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Test Case ID: UC8.2.3_TC3
Title: Esportazione report in PDF con formato non selezionato
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido ma non seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC8.2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-05-30";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const exportFile = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  await reportEnergeticiPage.clickExportButton();
  await page.on('download', download => download.path().then(passFail = 1));
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il file viene scaricato correttamente" : "Errore nello scaricare il file",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectWrongPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-04-01";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const tryToClickButton = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  let testPass = await reportEnergeticiPage.isExportButtonEnabled();
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il pulsante è non cliccabile correttamente" : "Il pulsante è cliccabile",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectPeriodAndFormat, exportFile } from './UC8.2.3_TC1.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC1 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC1", "Esportazione report in PDF con dati validi");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectPeriodAndFormat(page, reporter);
  await exportFile(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```

### UC8.2.3_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectWrongPeriodAndFormat, tryToClickButton } from './UC8.2.3_TC2.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC2 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC2", "Esportazione report in PDF con periodo non valido");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectWrongPeriodAndFormat(page, reporter);
  await tryToClickButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
File: census_sheet_page.js
const { timeout } = require('../../playwright.config');

export class CensusSheetPage {
  constructor(page) {
    this.page = page;
    this.path = require('path');
    
    // Locators
    this.searchInput = page.getByPlaceholder('Cerca');
    this.uploadButton = page.locator('#modal_upload_censustechsheet_btn');
    this.fileInput = page.locator('input[type="file"]');
    this.okButton = page.getByRole('button', { name: 'OK' });
    this.actionDropdown = page.locator('.text-start > .btn').first();
    this.downloadOption = page.locator('[data-kt-cts-table-filter="download_row"]').first();
    this.deleteOption = page.locator('[data-kt-cts-table-filter="delete_row"]').first();
    this.editOption = page.locator('[data-kt-cts-table-filter="edit_row"]').first();
    this.detailOption = page.locator('a[data-kt-cts-table-filter="detail_row"]').first();
    this.freezeOption = page.locator('a[data-action="freeze"]').first();
    this.confirmDeleteButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first();
    this.cancelDeleteButton = page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first();
    this.confirmButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first();
    
    // Column headers
    this.azioniColumn = page.getByLabel('Azioni');
    this.schedaColumn = page.getByLabel('Scheda: attiva per ordinare');
    this.proprietarioColumn = page.getByLabel('Proprietario: attiva per');
    this.comuneColumn = page.getByLabel('Comune: attiva per ordinare');
    this.statsColumn = page.getByLabel('Stats: attiva per ordinare la');
    this.statoColumn = page.getByLabel('Stato: attiva per ordinare la');
    this.infoColumn = page.getByLabel('Info: attiva per ordinare la');
    this.creazioneColumn = page.getByLabel('Creazione: attiva per');
    this.aggiornamentoColumn = page.getByLabel('Aggiornamento: attiva per');
    this.sottomissioneColumn = page.getByLabel('Sottomissione: attiva per');
  }

  async clickAzioniColumn() {
    await this.azioniColumn.click({timeout: 300000});
  }

  async clickSchedaColumn() {
    await this.schedaColumn.click({timeout: 300000});
  }

  async clickProprietarioColumn() {
    await this.proprietarioColumn.click({timeout: 300000});
  }

  async clickComuneColumn() {
    await this.comuneColumn.click({timeout: 300000});
  }

  async clickStatsColumn() {
    await this.statsColumn.click({timeout: 300000});
  }

  async clickStatoColumn() {
    await this.statoColumn.click({timeout: 300000});
  }

  async clickInfoColumn() {
    await this.infoColumn.click({timeout: 300000});
  }

  async clickCreazioneColumn() {
    await this.creazioneColumn.click({timeout: 300000});
  }

  async clickAggiornamentoColumn() {
    await this.aggiornamentoColumn.click({timeout: 300000});
  }

  async clickSottomissioneColumn() {
    await this.sottomissioneColumn.click({timeout: 300000});
  }

  async searchByName(name = 'Lucania') {
    await this.page.getByPlaceholder('Cerca').click();
    await this.page.getByPlaceholder('Cerca').fill(name);
    await this.page.getByPlaceholder('Cerca').press('Enter');
  }

  async clickAzioniButton() {
    await this.page.locator('.text-start > .btn').first().waitFor({ state: 'visible' });

    // Ora possiamo cliccare sul pulsante
    await this.page.locator('.text-start > .btn').first().click();
  }

  async clickAzioneDownload() {
    await this.page.locator('[data-kt-cts-table-filter="download_row"]').first().click();
  }

  async clickAzioneDelete() {
    await this.page.locator('[data-kt-cts-table-filter="delete_row"]').first().click();
  }

  async clickConfirmAzioneDelete() {
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickCancelAzioneDelete() {
    await this.page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickAzioneEdit() {
    await this.page.locator('[data-kt-cts-table-filter="edit_row"]').first().click();
  }

  async clickAzioneCongela() {
    await this.page.locator('a[data-action="freeze"]').first().click();
  }

  async clickAzioneDettaglio() {
    await this.page.locator('a[data-kt-cts-table-filter="detail_row"]').first().click();
  }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC3_TC1.functions.js
import { test, expect } from '@playwright/test';

import { SidebarPage } from '../../models/page_object_models/sidebar_page.js';

import TestResultReporter from '../../models/test-result-reporter.js';

export const accessPlatformAndAuthenticate = async function(page, reporter) {
  const startTime = new Date().getTime();
  
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);

  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
      reporter.addStep('UC3_TC1_ID1', 'Accedi alla piattaforma e autenticati correttamente', 'La dashboard principale viene visualizzata', 'Dashboard principale visualizzato', true, {}, executionTime);
  }

  expect(page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}

export const selectCensusSheetMenu = async function(page, reporter) {
  const startTime = new Date().getTime();
  
  const sidebarPage = new SidebarPage(page);
  await sidebarPage.clickCensusSheetLink();

  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;
  if (reporter) {
      reporter.addStep('UC3_TC1_ID2', 'Seleziona la voce del menù laterale relativa alle schede censimento', 'La sezione delle schede censimento si apre correttamente', 'Sezione schede censimento aperta', true, {}, executionTime);
  }

  expect(page.url()).toBe(process.env.E2E_CTS_URL);
}
// File: UC3_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

import { insertCorrectCredentials, clickLoginButton } from '../UC1/UC1_TC1.functions.js';

test("UC3_TC1 - Apertura interfaccia gestione schede censimento con successo", async ({page, browserName}) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3_TC1", "Apertura interfaccia gestione schede censimento con successo");

  await accessPlatformAndAuthenticate(page, reporter);
  await selectCensusSheetMenu(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });     
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC3.2_TC1
Title: Ricerca con parametri validi
Use Case ID: UC3.2
Priority: Alta
Type: Positivo
Preconditions: UC3
Postconditions: L’utente visualizza le informazioni corrispondenti alla ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca è visibile
  2. Step: Inserisci parametri di ricerca validi (es. nome, data)
Expected: I parametri vengono accettati
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Test Case ID: UC3.2_TC2
Title: Ricerca senza parametri
Use Case ID: UC3.2
Priority: Media
Type: Negativo
Preconditions: UC3
Postconditions: Il sistema segnala l’assenza di parametri di ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca è visibile
  2. Step: Lascia vuota la barra di ricerca
Expected: Il sistema segnala l’errore
  3. Step: Tenta di eseguire la ricerca
Expected: La ricerca non viene eseguita e compare un messaggio di errore

Test Case ID: UC3.2_TC3
Title: Ricerca con parametri non validi
Use Case ID: UC3.2
Priority: Media
Type: Negativo
Preconditions: UC3
Postconditions: Il sistema segnala l’errore dei parametri di ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca è visibile
  2. Step: Inserisci parametri di ricerca non validi (es. caratteri speciali)
Expected: Il sistema segnala l’errore dei parametri
  3. Step: Tenta di eseguire la ricerca
Expected: La ricerca non viene eseguita e compare un messaggio di errore

Test Case ID: UC3.2_TC4
Title: Ricerca con molti parametri
Use Case ID: UC3.2
Priority: Alta
Type: Prestazione
Preconditions: UC3
Postconditions: L’utente visualizza le informazioni corrispondenti alla ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca è visibile
  2. Step: Inserisci molti parametri di ricerca validi (es. nome, data, indirizzo)
Expected: I parametri vengono accettati
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Test Case ID: UC3.2_TC5
Title: Ricerca con caratteri speciali
Use Case ID: UC3.2
Priority: Media
Type: Edge
Preconditions: UC3
Postconditions: Il sistema gestisce correttamente i caratteri speciali
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca è visibile
  2. Step: Inserisci parametri di ricerca con caratteri speciali (es. @, #, $)
Expected: Il sistema gestisce correttamente i caratteri speciali
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-20 13:15:27,993 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-20 13:23:41,557 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-20 13:23:41,557 - test_code_generator.llm_client.ollama_client - INFO - model='llama3.3:latest' created_at='2025-06-20T13:23:41.556611542Z' done=True done_reason='stop' total_duration=493562308747 load_duration=12641593 prompt_eval_count=3204 prompt_eval_duration=9281784291 eval_count=3746 eval_duration=484261804768 message=Message(role='assistant', content='### UC3.2_TC1.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\n\nexport const accessSearchSection = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await expect(censusSheetPage.searchInput).toBeVisible();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC1_ID1\', \'Accedi alla sezione di ricerca schede censimento\', \'La barra di ricerca è visibile\', \'Barra di ricerca visibile\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const insertValidSearchParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC1_ID2\', \'Inserisci parametri di ricerca validi\', \'I parametri vengono accettati\', \'Parametri accettati\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const executeSearch = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC1_ID3\', \'Esegui la ricerca\', \'Vengono visualizzate le informazioni relative ai parametri inseriti\', \'Informazioni visualizzate\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2_TC1.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\nimport { accessSearchSection, insertValidSearchParameters, executeSearch } from \'./UC3.2_TC1.functions.js\';\n\ntest("UC3.2_TC1 - Ricerca con parametri validi", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2_TC1", "Ricerca con parametri validi");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n    await accessSearchSection(page, reporter);\n    await insertValidSearchParameters(page, reporter);\n    await executeSearch(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2_TC2.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\n\nexport const accessSearchSectionWithoutParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await expect(censusSheetPage.searchInput).toBeVisible();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC2_ID1\', \'Accedi alla sezione di ricerca schede censimento\', \'La barra di ricerca è visibile\', \'Barra di ricerca visibile\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const leaveSearchBarEmpty = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC2_ID2\', \'Lascia vuota la barra di ricerca\', \'Il sistema segnala l\\\'errore\', \'Errore segnalato\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const tryToExecuteSearchWithoutParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'\');\n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC2_ID3\', \'Tenta di eseguire la ricerca\', \'La ricerca non viene eseguita e compare un messaggio di errore\', \'Ricerca non eseguita\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2_TC2.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\nimport { accessSearchSectionWithoutParameters, leaveSearchBarEmpty, tryToExecuteSearchWithoutParameters } from \'./UC3.2_TC2.functions.js\';\n\ntest("UC3.2_TC2 - Ricerca senza parametri", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2_TC2", "Ricerca senza parametri");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n    await accessSearchSectionWithoutParameters(page, reporter);\n    await leaveSearchBarEmpty(page, reporter);\n    await tryToExecuteSearchWithoutParameters(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2_TC3.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\n\nexport const accessSearchSectionWithInvalidParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await expect(censusSheetPage.searchInput).toBeVisible();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC3_ID1\', \'Accedi alla sezione di ricerca schede censimento\', \'La barra di ricerca è visibile\', \'Barra di ricerca visibile\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const insertInvalidSearchParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'@#$\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC3_ID2\', \'Inserisci parametri di ricerca non validi\', \'Il sistema segnala l\\\'errore dei parametri\', \'Errore dei parametri segnalato\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const tryToExecuteSearchWithInvalidParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'@#$\');\n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC3_ID3\', \'Tenta di eseguire la ricerca\', \'La ricerca non viene eseguita e compare un messaggio di errore\', \'Ricerca non eseguita\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2_TC3.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\nimport { accessSearchSectionWithInvalidParameters, insertInvalidSearchParameters, tryToExecuteSearchWithInvalidParameters } from \'./UC3.2_TC3.functions.js\';\n\ntest("UC3.2_TC3 - Ricerca con parametri non validi", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2_TC3", "Ricerca con parametri non validi");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n    await accessSearchSectionWithInvalidParameters(page, reporter);\n    await insertInvalidSearchParameters(page, reporter);\n    await tryToExecuteSearchWithInvalidParameters(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2_TC4.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\n\nexport const accessSearchSectionWithMultipleParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await expect(censusSheetPage.searchInput).toBeVisible();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC4_ID1\', \'Accedi alla sezione di ricerca schede censimento\', \'La barra di ricerca è visibile\', \'Barra di ricerca visibile\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const insertMultipleSearchParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n    await page.waitForTimeout(1000);\n    await censusSheetPage.searchByName(\'Roma\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC4_ID2\', \'Inserisci molti parametri di ricerca validi\', \'I parametri vengono accettati\', \'Parametri accettati\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const executeSearchWithMultipleParameters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n    await page.waitForTimeout(1000);\n    await censusSheetPage.searchByName(\'Roma\');\n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC4_ID3\', \'Esegui la ricerca\', \'Vengono visualizzate le informazioni relative ai parametri inseriti\', \'Informazioni visualizzate\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2_TC4.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\nimport { accessSearchSectionWithMultipleParameters, insertMultipleSearchParameters, executeSearchWithMultipleParameters } from \'./UC3.2_TC4.functions.js\';\n\ntest("UC3.2_TC4 - Ricerca con molti parametri", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2_TC4", "Ricerca con molti parametri");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n    await accessSearchSectionWithMultipleParameters(page, reporter);\n    await insertMultipleSearchParameters(page, reporter);\n    await executeSearchWithMultipleParameters(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2_TC5.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\n\nexport const accessSearchSectionWithSpecialCharacters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await expect(censusSheetPage.searchInput).toBeVisible();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC5_ID1\', \'Accedi alla sezione di ricerca schede censimento\', \'La barra di ricerca è visibile\', \'Barra di ricerca visibile\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const insertSearchParametersWithSpecialCharacters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'@#$\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC5_ID2\', \'Inserisci parametri di ricerca con caratteri speciali\', \'Il sistema segnala l\\\'errore dei parametri\', \'Errore dei parametri segnalato\', true, {}, executionTime);\n    }\n\n    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();\n}\n\nexport const executeSearchWithSpecialCharacters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'@#$\');\n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2_TC5_ID3\', \'Esegui la ricerca\', \'La ricerca non viene eseguita e compare un messaggio di errore\', \'Ricerca non eseguita\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2_TC5.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'./UC3_TC1.functions.js\';\nimport { accessSearchSectionWithSpecialCharacters, insertSearchParametersWithSpecialCharacters, executeSearchWithSpecialCharacters } from \'./UC3.2_TC5.functions.js\';\n\ntest("UC3.2_TC5 - Ricerca con caratteri speciali", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2_TC5", "Ricerca con caratteri speciali");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n    await accessSearchSectionWithSpecialCharacters(page, reporter);\n    await insertSearchParametersWithSpecialCharacters(page, reporter);\n    await executeSearchWithSpecialCharacters(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```', images=None, tool_calls=None)
2025-06-20 13:23:41,557 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
