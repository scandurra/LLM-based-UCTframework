2025-06-13 13:49:38,234 - __main__ - INFO - Found 1 dependencies for use case UC3.2
2025-06-13 13:49:38,234 - __main__ - INFO - Read previously generated functions code for use case UC3 - test case UC3_TC1
2025-06-13 13:49:38,235 - __main__ - INFO - Read previously generated spec code for use case UC3 - test case UC3_TC1
2025-06-13 13:49:38,235 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-13 13:49:38,235 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-13 13:49:38,235 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-13 13:49:38,235 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
File: census_sheet_page.js
const { timeout } = require('../../playwright.config');

export class CensusSheetPage {
  constructor(page) {
    this.page = page;
    this.path = require('path');
    
    // Locators
    this.searchInput = page.getByPlaceholder('Cerca');
    this.uploadButton = page.locator('#modal_upload_censustechsheet_btn');
    this.fileInput = page.locator('input[type="file"]');
    this.okButton = page.getByRole('button', { name: 'OK' });
    this.actionDropdown = page.locator('.text-start > .btn').first();
    this.downloadOption = page.locator('[data-kt-cts-table-filter="download_row"]').first();
    this.deleteOption = page.locator('[data-kt-cts-table-filter="delete_row"]').first();
    this.editOption = page.locator('[data-kt-cts-table-filter="edit_row"]').first();
    this.detailOption = page.locator('a[data-kt-cts-table-filter="detail_row"]').first();
    this.freezeOption = page.locator('a[data-action="freeze"]').first();
    this.confirmDeleteButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first();
    this.cancelDeleteButton = page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first();
    this.confirmButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first();
    
    // Column headers
    this.azioniColumn = page.getByLabel('Azioni');
    this.schedaColumn = page.getByLabel('Scheda: attiva per ordinare');
    this.proprietarioColumn = page.getByLabel('Proprietario: attiva per');
    this.comuneColumn = page.getByLabel('Comune: attiva per ordinare');
    this.statsColumn = page.getByLabel('Stats: attiva per ordinare la');
    this.statoColumn = page.getByLabel('Stato: attiva per ordinare la');
    this.infoColumn = page.getByLabel('Info: attiva per ordinare la');
    this.creazioneColumn = page.getByLabel('Creazione: attiva per');
    this.aggiornamentoColumn = page.getByLabel('Aggiornamento: attiva per');
    this.sottomissioneColumn = page.getByLabel('Sottomissione: attiva per');
  }

  async clickAzioniColumn() {
    await this.azioniColumn.click({timeout: 300000});
  }

  async clickSchedaColumn() {
    await this.schedaColumn.click({timeout: 300000});
  }

  async clickProprietarioColumn() {
    await this.proprietarioColumn.click({timeout: 300000});
  }

  async clickComuneColumn() {
    await this.comuneColumn.click({timeout: 300000});
  }

  async clickStatsColumn() {
    await this.statsColumn.click({timeout: 300000});
  }

  async clickStatoColumn() {
    await this.statoColumn.click({timeout: 300000});
  }

  async clickInfoColumn() {
    await this.infoColumn.click({timeout: 300000});
  }

  async clickCreazioneColumn() {
    await this.creazioneColumn.click({timeout: 300000});
  }

  async clickAggiornamentoColumn() {
    await this.aggiornamentoColumn.click({timeout: 300000});
  }

  async clickSottomissioneColumn() {
    await this.sottomissioneColumn.click({timeout: 300000});
  }

  async searchByName(name = 'Lucania') {
    await this.page.getByPlaceholder('Cerca').click();
    await this.page.getByPlaceholder('Cerca').fill(name);
    await this.page.getByPlaceholder('Cerca').press('Enter');
  }

  async clickAzioniButton() {
    await this.page.locator('.text-start > .btn').first().waitFor({ state: 'visible' });

    // Ora possiamo cliccare sul pulsante
    await this.page.locator('.text-start > .btn').first().click();
  }

  async clickAzioneDownload() {
    await this.page.locator('[data-kt-cts-table-filter="download_row"]').first().click();
  }

  async clickAzioneDelete() {
    await this.page.locator('[data-kt-cts-table-filter="delete_row"]').first().click();
  }

  async clickConfirmAzioneDelete() {
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickCancelAzioneDelete() {
    await this.page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickAzioneEdit() {
    await this.page.locator('[data-kt-cts-table-filter="edit_row"]').first().click();
  }

  async clickAzioneCongela() {
    await this.page.locator('a[data-action="freeze"]').first().click();
  }

  async clickAzioneDettaglio() {
    await this.page.locator('a[data-kt-cts-table-filter="detail_row"]').first().click();
  }
}

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC3_TC1.functions.js
import { SidebarPage } from '../../models/page_object_models/sidebar_page.js';

import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';

export const accessPlatformAndAuthenticate = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await fillCorrectCredentials(page, null);
    await clickLoginButton(page, null);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3_TC1_ID1', 'Accedi alla piattaforma e autenticati correttamente', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}

export const selectCensusSheetMenu = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const sidebarPage = new SidebarPage(page);
    await sidebarPage.clickCensusSheetLink();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3_TC1_ID2', 'Seleziona la voce del menÃ¹ laterale relativa alle schede censimento', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
// File: UC3_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

import { fillCorrectCredentials, clickLoginButton } from '../UC1/UC1_TC1.functions.js';

test("UC3_TC1 - Apertura interfaccia gestione schede censimento con successo", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3_TC1", "Apertura interfaccia gestione schede censimento con successo");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await selectCensusSheetMenu(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and each test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await functionNameDescribingStep1(page, reporter);
    await functionNameDescribingStep2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC3.2_TC1
Title: Ricerca con parametri validi
Use Case ID: UC3.2
Priority: Alta
Type: Positivo
Preconditions: UC3
Postconditions: Lâutente visualizza le informazioni corrispondenti alla ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca Ã¨ visibile
  2. Step: Inserisci parametri di ricerca validi (es. nome, data)
Expected: I parametri vengono accettati
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Test Case ID: UC3.2_TC2
Title: Ricerca senza parametri
Use Case ID: UC3.2
Priority: Media
Type: Negativo
Preconditions: UC3
Postconditions: Il sistema segnala lâassenza di parametri di ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca Ã¨ visibile
  2. Step: Lascia vuota la barra di ricerca
Expected: Il sistema segnala lâerrore
  3. Step: Tenta di eseguire la ricerca
Expected: La ricerca non viene eseguita e compare un messaggio di errore

Test Case ID: UC3.2_TC3
Title: Ricerca con parametri non validi
Use Case ID: UC3.2
Priority: Media
Type: Negativo
Preconditions: UC3
Postconditions: Il sistema segnala lâerrore dei parametri di ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca Ã¨ visibile
  2. Step: Inserisci parametri di ricerca non validi (es. caratteri speciali)
Expected: Il sistema segnala lâerrore dei parametri
  3. Step: Tenta di eseguire la ricerca
Expected: La ricerca non viene eseguita e compare un messaggio di errore

Test Case ID: UC3.2_TC4
Title: Ricerca con molti parametri
Use Case ID: UC3.2
Priority: Alta
Type: Prestazione
Preconditions: UC3
Postconditions: Lâutente visualizza le informazioni corrispondenti alla ricerca
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca Ã¨ visibile
  2. Step: Inserisci molti parametri di ricerca validi (es. nome, data, indirizzo)
Expected: I parametri vengono accettati
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Test Case ID: UC3.2_TC5
Title: Ricerca con caratteri speciali
Use Case ID: UC3.2
Priority: Media
Type: Edge
Preconditions: UC3
Postconditions: Il sistema gestisce correttamente i caratteri speciali
Test Steps:
  1. Step: Accedi alla sezione di ricerca schede censimento
Expected: La barra di ricerca Ã¨ visibile
  2. Step: Inserisci parametri di ricerca con caratteri speciali (es. @, #, $)
Expected: Il sistema gestisce correttamente i caratteri speciali
  3. Step: Esegui la ricerca
Expected: Vengono visualizzate le informazioni relative ai parametri inseriti

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-13 13:49:38,235 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-13 14:03:37,293 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-13 14:03:37,293 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 839055255264 time, with 3201 tokens in prompt and 3583 tokens in response. Content:
 ### UC3.2_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

export const accessSearchSection = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID1', 'Accedi alla sezione di ricerca schede censimento', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const insertValidSearchParameters = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID2', 'Inserisci parametri di ricerca validi', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const executeSearch = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID3', 'Esegui la ricerca', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
```

### UC3.2_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAndAuthenticate } from './UC3_TC1.functions.js';
import { accessSearchSection, insertValidSearchParameters, executeSearch } from './UC3.2_TC1.functions.js';

test("UC3.2_TC1 - Ricerca con parametri validi", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC1", "Ricerca con parametri validi");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSection(page, reporter);
    await insertValidSearchParameters(page, reporter);
    await executeSearch(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.2_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

export const accessSearchSectionEmpty = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC2_ID1', 'Accedi alla sezione di ricerca schede censimento', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const leaveSearchBarEmpty = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('');

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC2_ID2', 'Lascia vuota la barra di ricerca', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const tryExecuteSearchEmpty = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC2_ID3', 'Tenta di eseguire la ricerca', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
```

### UC3.2_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAndAuthenticate } from './UC3_TC1.functions.js';
import { accessSearchSectionEmpty, leaveSearchBarEmpty, tryExecuteSearchEmpty } from './UC3.2_TC2.functions.js';

test("UC3.2_TC2 - Ricerca senza parametri", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC2", "Ricerca senza parametri");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSectionEmpty(page, reporter);
    await leaveSearchBarEmpty(page, reporter);
    await tryExecuteSearchEmpty(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.2_TC3.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

export const accessSearchSectionInvalid = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC3_ID1', 'Accedi alla sezione di ricerca schede censimento', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const insertInvalidSearchParameters = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('@#$');

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC3_ID2', 'Inserisci parametri di ricerca non validi', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const tryExecuteSearchInvalid = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('@#$');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC3_ID3', 'Tenta di eseguire la ricerca', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
```

### UC3.2_TC3.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAndAuthenticate } from './UC3_TC1.functions.js';
import { accessSearchSectionInvalid, insertInvalidSearchParameters, tryExecuteSearchInvalid } from './UC3.2_TC3.functions.js';

test("UC3.2_TC3 - Ricerca con parametri non validi", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC3", "Ricerca con parametri non validi");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSectionInvalid(page, reporter);
    await insertInvalidSearchParameters(page, reporter);
    await tryExecuteSearchInvalid(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.2_TC4.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

export const accessSearchSectionMultiple = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC4_ID1', 'Accedi alla sezione di ricerca schede censimento', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const insertMultipleSearchParameters = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');
    await page.waitForTimeout(1000);
    await censusSheetPage.searchByName('Roma');

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC4_ID2', 'Inserisci molti parametri di ricerca validi', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const executeSearchMultiple = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');
    await page.waitForTimeout(1000);
    await censusSheetPage.searchByName('Roma');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC4_ID3', 'Esegui la ricerca', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
```

### UC3.2_TC4.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAndAuthenticate } from './UC3_TC1.functions.js';
import { accessSearchSectionMultiple, insertMultipleSearchParameters, executeSearchMultiple } from './UC3.2_TC4.functions.js';

test("UC3.2_TC4 - Ricerca con molti parametri", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC4", "Ricerca con molti parametri");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSectionMultiple(page, reporter);
    await insertMultipleSearchParameters(page, reporter);
    await executeSearchMultiple(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC3.2_TC5.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from './UC3_TC1.functions.js';

export const accessSearchSectionSpecial = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC5_ID1', 'Accedi alla sezione di ricerca schede censimento', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const insertSpecialSearchParameters = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('@#$');

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC5_ID2', 'Inserisci parametri di ricerca speciali', true, true, true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const executeSearchSpecial = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('@#$');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC3.2_TC5_ID3', 'Esegui la ricerca', true, true, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
```

### UC3.2_TC5.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAndAuthenticate } from './UC3_TC1.functions.js';
import { accessSearchSectionSpecial, insertSpecialSearchParameters, executeSearchSpecial } from './UC3.2_TC5.functions.js';

test("UC3.2_TC5 - Ricerca con parametri speciali", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC5", "Ricerca con parametri speciali");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSectionSpecial(page, reporter);
    await insertSpecialSearchParameters(page, reporter);
    await executeSearchSpecial(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```
2025-06-13 14:03:37,293 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
