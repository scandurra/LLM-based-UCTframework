2025-06-13 12:32:01,295 - __main__ - INFO - Found 1 dependencies for use case UC2.4
2025-06-13 12:32:01,296 - __main__ - INFO - Read previously generated functions code for use case UC2 - test case UC2_TC1
2025-06-13 12:32:01,296 - __main__ - INFO - Read previously generated spec code for use case UC2 - test case UC2_TC1
2025-06-13 12:32:01,296 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-13 12:32:01,296 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-13 12:32:01,296 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-13 12:32:01,296 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
File: dashboard_page_benchmarking_kpi.js
export class DashboardPageBenchmarkingKpi {
  constructor(page) {
    this.page = page;
    
    // City selection selectors
    this.citySelector = this.page.getByLabel('Seleziona');
    this.cityItems = this.page.locator('ul > li');
    
    // KPI selection selectors
    this.kpiSelector = this.page.locator('#compute_apply_chart_municipality_benchmark_general_data_static');
    
    // Results verification selectors
    this.chartContainer = this.page.locator('#inner_area_chart_municipality_benchmark_general_data_static');
    this.chartPoint = this.page.locator('path.highcharts-point').first();
  }

  async openCitySelector() {
    await this.citySelector.click();
  }

  async selectCityByIndex(cityIndex = 21) {
    await this.cityItems.nth(cityIndex).click();
  }

  async selectCity(cityIndex = 21) {
    await this.openCitySelector();
    await this.selectCityByIndex(cityIndex);
  }

  async waitForKPISelectorVisible() {
    await this.page.waitForSelector('#compute_apply_chart_municipality_benchmark_general_data_static', { state: 'visible' });
  }

  async selectKPI() {
    await this.waitForKPISelectorVisible();
    await this.kpiSelector.click();
  }

  async waitForResults(timeout = 5000) {
    await this.page.waitForTimeout(timeout);
  }

  async isChartContainerVisible() {
    return await this.chartContainer.isVisible();
  }

  async isChartPointVisible() {
    return await this.chartPoint.isVisible();
  }

  async verifyKPIResults() {
    const isChartContainerVisible = await this.isChartContainerVisible();
    const isPointVisible = await this.isChartPointVisible();
    
    return isChartContainerVisible || isPointVisible;
  }

  async applyKPIAndVerify(timeout = 5000) {
    await this.waitForResults(timeout);
    return await this.verifyKPIResults();
  }

  async isCitySelectorVisible() {
    return await this.citySelector.isVisible();
  }

  async isKPISelectorVisible() {
    return await this.kpiSelector.isVisible();
  }
}

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC2_TC1.functions.js
import { SidebarPage } from '../../models/page_object_models/sidebar_page.js';

import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

export const accessPlatformAsRegisteredUser = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await fillCorrectCredentials(page, null);
    await clickLoginButton(page, null);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID1', 'Accedi alla piattaforma come utente registrato', true, await page.url() === process.env.E2E_HOME_URL, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_HOME_URL);
}

export const selectDashboardMenu = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const sidebarPage = new SidebarPage(page);
    await sidebarPage.clickDashboardLink();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù relativa alla dashboard', true, await page.url() === process.env.E2E_DASHBOARD_URL, true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}
// File: UC2_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';

import { fillCorrectCredentials, clickLoginButton } from '../UC1_TC1/UC1_TC1.functions.js';

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2_TC1", "Apertura della dashboard con utente autorizzato");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and each test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Eventually go to page

    // Call step functions in sequence
    await functionNameDescribingStep1(page, reporter);
    await functionNameDescribingStep2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC2.4_TC1
Title: Selezione di comuni e KPI validi per benchmarking
Use Case ID: UC2.4
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza il risultato della analisi su un grafico
Test Steps:
  1. Step: Seleziona due o più comuni dal menù a tendina
Expected: I comuni vengono selezionati correttamente
  2. Step: Scegli un KPI valido per il confronto
Expected: Il KPI viene accettato
  3. Step: Conferma la richiesta cliccando sul pulsante
Expected: Il grafico con il confronto desiderato viene visualizzato

Test Case ID: UC2.4_TC2
Title: Selezione di un solo comune per benchmarking
Use Case ID: UC2.4
Priority: Media
Type: Negativo
Preconditions: UC2
Postconditions: Il sistema richiede la selezione di almeno due comuni
Test Steps:
  1. Step: Seleziona un solo comune dal menù a tendina
Expected: Il sistema segnala l’errore
  2. Step: Scegli un KPI valido per il confronto
Expected: Il KPI non viene considerato senza la selezione di almeno due comuni
  3. Step: Tenta di confermare la richiesta cliccando sul pulsante
Expected: La richiesta non procede e viene mostrato un messaggio di errore

Test Case ID: UC2.4_TC3
Title: Selezione di KPI non valido per benchmarking
Use Case ID: UC2.4
Priority: Media
Type: Negativo
Preconditions: UC2
Postconditions: Il sistema segnala l’errore e richiede la selezione di un KPI valido
Test Steps:
  1. Step: Seleziona due o più comuni dal menù a tendina
Expected: I comuni vengono selezionati correttamente
  2. Step: Scegli un KPI non disponibile o non valido per il confronto
Expected: Il sistema segnala l’errore e richiede la selezione di un KPI diverso
  3. Step: Tenta di confermare la richiesta cliccando sul pulsante
Expected: La richiesta non procede e viene mostrato un messaggio di errore

Test Case ID: UC2.4_TC4
Title: Boundary test: selezione del massimo numero di comuni consentito
Use Case ID: UC2.4
Priority: Alta
Type: Boundary
Preconditions: UC2
Postconditions: Il sistema gestisce correttamente la richiesta e visualizza il grafico
Test Steps:
  1. Step: Seleziona il massimo numero di comuni possibile dal menù a tendina
Expected: I comuni vengono selezionati senza errori
  2. Step: Scegli un KPI valido per il confronto
Expected: Il KPI viene accettato
  3. Step: Conferma la richiesta cliccando sul pulsante
Expected: Il grafico con il confronto desiderato viene visualizzato correttamente

Test Case ID: UC2.4_TC5
Title: Usabilità: selezione dei comuni e KPI tramite ricerca
Use Case ID: UC2.4
Priority: Alta
Type: Usabilità
Preconditions: UC2
Postconditions: L’utente trova facilmente i comuni e il KPI desiderati
Test Steps:
  1. Step: Utilizza la funzione di ricerca per trovare i comuni desiderati
Expected: I comuni vengono trovati correttamente
  2. Step: Seleziona il KPI desiderato tramite la funzione di filtro o ricerca
Expected: Il KPI viene selezionato facilmente
  3. Step: Conferma la richiesta cliccando sul pulsante
Expected: Il grafico con il confronto desiderato viene visualizzato in modo chiaro e intuitivo

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-13 12:32:01,296 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-13 12:46:20,748 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-13 12:46:20,749 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 859450301940 time, with 2627 tokens in prompt and 3821 tokens in response. Content:
 ### UC2.4_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { DashboardPageBenchmarkingKpi } from '../../models/page_object_models/dashboard_page_benchmarking_kpi.js';

export const selectMultipleCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectCity(0);
    await dashboardPage.selectCity(1);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC1_ID1', 'Seleziona due o più comuni dal menù a tendina', true, await dashboardPage.isCitySelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isCitySelectorVisible()).toBeTruthy();
}

export const selectValidKPI = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectKPI();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC1_ID2', 'Scegli un KPI valido per il confronto', true, await dashboardPage.isKPISelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isKPISelectorVisible()).toBeTruthy();
}

export const confirmRequest = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.applyKPIAndVerify();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC1_ID3', 'Conferma la richiesta cliccando sul pulsante', true, await dashboardPage.verifyKPIResults(), true, {}, executionTime);
    }

    expect(await dashboardPage.verifyKPIResults()).toBeTruthy();
}
```

### UC2.4_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { selectMultipleCities, selectValidKPI, confirmRequest } from './UC2.4_TC1.functions.js';

test("UC2.4_TC1 - Selezione di comuni e KPI validi per benchmarking", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.4_TC1", "Selezione di comuni e KPI validi per benchmarking");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await selectMultipleCities(page, reporter);
    await selectValidKPI(page, reporter);
    await confirmRequest(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC2.4_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { DashboardPageBenchmarkingKpi } from '../../models/page_object_models/dashboard_page_benchmarking_kpi.js';

export const selectSingleCity = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectCity(0);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC2_ID1', 'Seleziona un solo comune dal menù a tendina', true, await dashboardPage.isCitySelectorVisible(), false, {}, executionTime);
    }

    expect(await dashboardPage.isCitySelectorVisible()).toBeTruthy();
}

export const selectValidKPIWithoutMultipleCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectKPI();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC2_ID2', 'Scegli un KPI valido per il confronto senza selezionare più comuni', false, await dashboardPage.isKPISelectorVisible(), false, {}, executionTime);
    }

    expect(await dashboardPage.isKPISelectorVisible()).toBeFalsy();
}

export const tryToConfirmRequestWithoutMultipleCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.applyKPIAndVerify();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC2_ID3', 'Tenta di confermare la richiesta cliccando sul pulsante senza selezionare più comuni', false, await dashboardPage.verifyKPIResults(), false, {}, executionTime);
    }

    expect(await dashboardPage.verifyKPIResults()).toBeFalsy();
}
```

### UC2.4_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { selectSingleCity, selectValidKPIWithoutMultipleCities, tryToConfirmRequestWithoutMultipleCities } from './UC2.4_TC2.functions.js';

test("UC2.4_TC2 - Selezione di un solo comune per benchmarking", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.4_TC2", "Selezione di un solo comune per benchmarking");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await selectSingleCity(page, reporter);
    await selectValidKPIWithoutMultipleCities(page, reporter);
    await tryToConfirmRequestWithoutMultipleCities(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC2.4_TC3.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { DashboardPageBenchmarkingKpi } from '../../models/page_object_models/dashboard_page_benchmarking_kpi.js';

export const selectMultipleCitiesWithInvalidKPI = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectCity(0);
    await dashboardPage.selectCity(1);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC3_ID1', 'Seleziona due o più comuni dal menù a tendina con KPI non valido', true, await dashboardPage.isCitySelectorVisible(), false, {}, executionTime);
    }

    expect(await dashboardPage.isCitySelectorVisible()).toBeTruthy();
}

export const selectInvalidKPI = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    // Simulate selecting an invalid KPI
    await dashboardPage.selectKPI();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC3_ID2', 'Scegli un KPI non disponibile o non valido per il confronto', false, await dashboardPage.isKPISelectorVisible(), false, {}, executionTime);
    }

    expect(await dashboardPage.isKPISelectorVisible()).toBeFalsy();
}

export const tryToConfirmRequestWithInvalidKPI = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.applyKPIAndVerify();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC3_ID3', 'Tenta di confermare la richiesta cliccando sul pulsante con KPI non valido', false, await dashboardPage.verifyKPIResults(), false, {}, executionTime);
    }

    expect(await dashboardPage.verifyKPIResults()).toBeFalsy();
}
```

### UC2.4_TC3.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { selectMultipleCitiesWithInvalidKPI, selectInvalidKPI, tryToConfirmRequestWithInvalidKPI } from './UC2.4_TC3.functions.js';

test("UC2.4_TC3 - Selezione di comuni e KPI non validi per benchmarking", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.4_TC3", "Selezione di comuni e KPI non validi per benchmarking");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await selectMultipleCitiesWithInvalidKPI(page, reporter);
    await selectInvalidKPI(page, reporter);
    await tryToConfirmRequestWithInvalidKPI(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC2.4_TC4.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { DashboardPageBenchmarkingKpi } from '../../models/page_object_models/dashboard_page_benchmarking_kpi.js';

export const selectMaximumNumberOfCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    for (let i = 0; i < 10; i++) { // Assuming the maximum number of cities is 10
        await dashboardPage.selectCity(i);
    }

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC4_ID1', 'Seleziona il massimo numero di comuni possibile dal menù a tendina', true, await dashboardPage.isCitySelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isCitySelectorVisible()).toBeTruthy();
}

export const selectValidKPIWithMaximumCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.selectKPI();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC4_ID2', 'Scegli un KPI valido per il confronto con il massimo numero di comuni', true, await dashboardPage.isKPISelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isKPISelectorVisible()).toBeTruthy();
}

export const confirmRequestWithMaximumCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.applyKPIAndVerify();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC4_ID3', 'Conferma la richiesta cliccando sul pulsante con il massimo numero di comuni', true, await dashboardPage.verifyKPIResults(), true, {}, executionTime);
    }

    expect(await dashboardPage.verifyKPIResults()).toBeTruthy();
}
```

### UC2.4_TC4.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { selectMaximumNumberOfCities, selectValidKPIWithMaximumCities, confirmRequestWithMaximumCities } from './UC2.4_TC4.functions.js';

test("UC2.4_TC4 - Boundary test: selezione del massimo numero di comuni consentito", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.4_TC4", "Boundary test: selezione del massimo numero di comuni consentito");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await selectMaximumNumberOfCities(page, reporter);
    await selectValidKPIWithMaximumCities(page, reporter);
    await confirmRequestWithMaximumCities(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

### UC2.4_TC5.functions.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { DashboardPageBenchmarkingKpi } from '../../models/page_object_models/dashboard_page_benchmarking_kpi.js';

export const searchForCities = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    // Simulate searching for cities
    await dashboardPage.selectCity(0);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC5_ID1', 'Utilizza la funzione di ricerca per trovare i comuni desiderati', true, await dashboardPage.isCitySelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isCitySelectorVisible()).toBeTruthy();
}

export const selectKPIUsingFilter = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    // Simulate selecting KPI using filter
    await dashboardPage.selectKPI();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC5_ID2', 'Seleziona il KPI desiderato tramite la funzione di filtro o ricerca', true, await dashboardPage.isKPISelectorVisible(), true, {}, executionTime);
    }

    expect(await dashboardPage.isKPISelectorVisible()).toBeTruthy();
}

export const confirmRequestWithSearchAndFilter = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPage = new DashboardPageBenchmarkingKpi(page);
    await dashboardPage.applyKPIAndVerify();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.4_TC5_ID3', 'Conferma la richiesta cliccando sul pulsante con ricerca e filtro', true, await dashboardPage.verifyKPIResults(), true, {}, executionTime);
    }

    expect(await dashboardPage.verifyKPIResults()).toBeTruthy();
}
```

### UC2.4_TC5.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { searchForCities, selectKPIUsingFilter, confirmRequestWithSearchAndFilter } from './UC2.4_TC5.functions.js';

test("UC2.4_TC5 - Usabilità: ricerca e filtro per comuni e KPI", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.4_TC5", "Usabilità: ricerca e filtro per comuni e KPI");

    await page.goto(process.env.E2E_BASE_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await searchForCities(page, reporter);
    await selectKPIUsingFilter(page, reporter);
    await confirmRequestWithSearchAndFilter(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```
2025-06-13 12:46:20,749 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
