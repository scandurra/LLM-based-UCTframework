2025-06-20 13:00:11,209 - __main__ - INFO - Found 1 dependencies for use case UC3.2.1
2025-06-20 13:00:11,209 - __main__ - INFO - Read previously generated functions code for use case UC3.2 - test case UC3.2_TC1
2025-06-20 13:00:11,209 - __main__ - INFO - Read previously generated spec code for use case UC3.2 - test case UC3.2_TC1
2025-06-20 13:00:11,209 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-20 13:00:11,209 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-20 13:00:11,209 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/batch_processing/one_shot/llama3.3/previous_code_section.txt
2025-06-20 13:00:11,209 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in each test case.
When creating the test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
// File: report_energetici_page.js
export class ReportEnergeticiPage {  
    constructor(page) {
        this.page = page;
        this.fromDateInput = page.locator("#from-date");
        this.toDateInput = page.locator("#to-date");
        this.exportFormatSelect = page.locator("#export-format");
        this.exportButton = page.locator("#export-button");
    }
  
    async selectFromDate(date) {
        await this.fromDateInput.fill(date);
    }
  
    async selectToDate(date) {
        await this.toDateInput.fill(date);
    }
  
    // format can be 'csv' or 'pdf'
    async selectExportFormat(format) {
        await this.exportFormatSelect.selectOption(format);
    }

    async isExportButtonEnabled() {
        return !(await this.exportButton.isDisabled());
    }
  
    async clickExportButton() {
        return await this.exportButton.click();
    }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';
import { LoginPage } from '../../models/page_object_models/login_page.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const navigateToLoginPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.goto(process.env.E2E_LOGIN_URL);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
    }
}

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
    await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Insert correct credentials', 'Credentials accepted', 'Credentials accepted', true, `E2E_LOGIN_EMAIL_ADMIN: ${process.env.E2E_LOGIN_EMAIL_ADMIN}, E2E_LOGIN_PASSWORD_ADMIN: ${process.env.E2E_LOGIN_PASSWORD_ADMIN}`, executionTime);
    }
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.login();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Click login button', 'System proceeds with authentication', 'System proceeds with authentication', true, '', executionTime);
    }
}

export const verifySuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    const message = await loginPage.getErrorMessage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID4', 'Verify success message', 'Success message displayed', message, message !== null, '', executionTime);
    }

    await expect(message).not.toBeNull();
}

// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    await navigateToLoginPage(page, reporter);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");
    
    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC8.2.3_TC1
Title: Esportazione report in PDF con dati validi
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file esportato viene scaricato correttamente
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido e il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Download del file
Expected: Il file PDF viene generato e scaricato

Test Case ID: UC8.2.3_TC2
Title: Esportazione report in PDF con periodo non valido
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo non valido, con data da minore di data a e seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Test Case ID: UC8.2.3_TC3
Title: Esportazione report in PDF con formato non selezionato
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file non viene scaricato
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido ma non seleziona il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Click sul pulsante per scaricare pdf
Expected: Il pulsante non è cliccabile

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC8.2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-05-30";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const exportFile = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  await reportEnergeticiPage.clickExportButton();
  await page.on('download', download => download.path().then(passFail = 1));
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il file viene scaricato correttamente" : "Errore nello scaricare il file",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC2.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectWrongPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-04-01";
  const format = "pdf"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const tryToClickButton = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  let testPass = await reportEnergeticiPage.isExportButtonEnabled();
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il pulsante è non cliccabile correttamente" : "Il pulsante è cliccabile",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectPeriodAndFormat, exportFile } from './UC8.2.3_TC1.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC1 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC1", "Esportazione report in PDF con dati validi");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectPeriodAndFormat(page, reporter);
  await exportFile(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```

### UC8.2.3_TC2.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectWrongPeriodAndFormat, tryToClickButton } from './UC8.2.3_TC2.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC8.2.3_TC2 - Esportazione report in PDF con dati validi", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC8.2.3_TC2", "Esportazione report in PDF con periodo non valido");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectWrongPeriodAndFormat(page, reporter);
  await tryToClickButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});

```
------------------------------------------------------------------
ROLE: user
Use only this page object models for interacting with the DOM:
```javascript
File: census_sheet_page.js
const { timeout } = require('../../playwright.config');

export class CensusSheetPage {
  constructor(page) {
    this.page = page;
    this.path = require('path');
    
    // Locators
    this.searchInput = page.getByPlaceholder('Cerca');
    this.uploadButton = page.locator('#modal_upload_censustechsheet_btn');
    this.fileInput = page.locator('input[type="file"]');
    this.okButton = page.getByRole('button', { name: 'OK' });
    this.actionDropdown = page.locator('.text-start > .btn').first();
    this.downloadOption = page.locator('[data-kt-cts-table-filter="download_row"]').first();
    this.deleteOption = page.locator('[data-kt-cts-table-filter="delete_row"]').first();
    this.editOption = page.locator('[data-kt-cts-table-filter="edit_row"]').first();
    this.detailOption = page.locator('a[data-kt-cts-table-filter="detail_row"]').first();
    this.freezeOption = page.locator('a[data-action="freeze"]').first();
    this.confirmDeleteButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first();
    this.cancelDeleteButton = page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first();
    this.confirmButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first();
    
    // Column headers
    this.azioniColumn = page.getByLabel('Azioni');
    this.schedaColumn = page.getByLabel('Scheda: attiva per ordinare');
    this.proprietarioColumn = page.getByLabel('Proprietario: attiva per');
    this.comuneColumn = page.getByLabel('Comune: attiva per ordinare');
    this.statsColumn = page.getByLabel('Stats: attiva per ordinare la');
    this.statoColumn = page.getByLabel('Stato: attiva per ordinare la');
    this.infoColumn = page.getByLabel('Info: attiva per ordinare la');
    this.creazioneColumn = page.getByLabel('Creazione: attiva per');
    this.aggiornamentoColumn = page.getByLabel('Aggiornamento: attiva per');
    this.sottomissioneColumn = page.getByLabel('Sottomissione: attiva per');
  }

  async clickAzioniColumn() {
    await this.azioniColumn.click({timeout: 300000});
  }

  async clickSchedaColumn() {
    await this.schedaColumn.click({timeout: 300000});
  }

  async clickProprietarioColumn() {
    await this.proprietarioColumn.click({timeout: 300000});
  }

  async clickComuneColumn() {
    await this.comuneColumn.click({timeout: 300000});
  }

  async clickStatsColumn() {
    await this.statsColumn.click({timeout: 300000});
  }

  async clickStatoColumn() {
    await this.statoColumn.click({timeout: 300000});
  }

  async clickInfoColumn() {
    await this.infoColumn.click({timeout: 300000});
  }

  async clickCreazioneColumn() {
    await this.creazioneColumn.click({timeout: 300000});
  }

  async clickAggiornamentoColumn() {
    await this.aggiornamentoColumn.click({timeout: 300000});
  }

  async clickSottomissioneColumn() {
    await this.sottomissioneColumn.click({timeout: 300000});
  }

  async searchByName(name = 'Lucania') {
    await this.page.getByPlaceholder('Cerca').click();
    await this.page.getByPlaceholder('Cerca').fill(name);
    await this.page.getByPlaceholder('Cerca').press('Enter');
  }

  async clickAzioniButton() {
    await this.page.locator('.text-start > .btn').first().waitFor({ state: 'visible' });

    // Ora possiamo cliccare sul pulsante
    await this.page.locator('.text-start > .btn').first().click();
  }

  async clickAzioneDownload() {
    await this.page.locator('[data-kt-cts-table-filter="download_row"]').first().click();
  }

  async clickAzioneDelete() {
    await this.page.locator('[data-kt-cts-table-filter="delete_row"]').first().click();
  }

  async clickConfirmAzioneDelete() {
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickCancelAzioneDelete() {
    await this.page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickAzioneEdit() {
    await this.page.locator('[data-kt-cts-table-filter="edit_row"]').first().click();
  }

  async clickAzioneCongela() {
    await this.page.locator('a[data-action="freeze"]').first().click();
  }

  async clickAzioneDettaglio() {
    await this.page.locator('a[data-kt-cts-table-filter="detail_row"]').first().click();
  }
}
```

Use the following test parameters when creating scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC3.2_TC1.functions.js
import { test, expect } from '@playwright/test';

import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from '../UC3/UC3_TC1.functions.js';

export const accessSearchSection = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await selectCensusSheetMenu(page, null);
    const censusSheetPage = new CensusSheetPage(page);
    await expect(censusSheetPage.searchInput).toBeVisible();

    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID1', 'Accedi alla sezione di ricerca schede censimento', 'La barra di ricerca è visibile', 'Barra di ricerca visibile', true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const insertValidSearchParameters = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');

    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID2', 'Inserisci parametri di ricerca validi', 'I parametri vengono accettati', 'Parametri accettati', true, {}, executionTime);
    }

    expect(await censusSheetPage.searchInput.isVisible()).toBeTruthy();
}

export const executeSearch = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const censusSheetPage = new CensusSheetPage(page);
    await censusSheetPage.searchByName('Lucania');
    await page.waitForTimeout(1000);

    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC3.2_TC1_ID3', 'Esegui la ricerca', 'Vengono visualizzate le informazioni relative ai parametri inseriti', 'Informazioni visualizzate', true, {}, executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_CTS_URL);
}
// File: UC3.2_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenu } from '../UC3/UC3_TC1.functions.js';

import { accessSearchSection, insertValidSearchParameters, executeSearch } from './UC3.2_TC1.functions.js';

test("UC3.2_TC1 - Ricerca con parametri validi", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC3.2_TC1", "Ricerca con parametri validi");

    await accessPlatformAndAuthenticate(page, reporter);
    await accessSearchSection(page, reporter);
    await insertValidSearchParameters(page, reporter);
    await executeSearch(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     
});
```

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC*_TC*.functions.js" and the test in a file called "UC*_TC*.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC*_TC*.spec.js" file to reference functions in "UC*_TC*.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test cases to be converted in Playwright script:
Test Case ID: UC3.2.1_TC1
Title: Ricerca scheda censimento per nome con risultati validi
Use Case ID: UC3.2.1
Priority: Alta
Type: Positivo
Preconditions: UC3.2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Inserisci un nome valido nella barra di ricerca
Expected: La pagina di risultati si carica correttamente
  2. Step: Conferma la ricerca
Expected: I risultati della ricerca vengono visualizzati
  3. Step: Visualizza i dettagli delle schede censimento trovate
Expected: Le informazioni sono complete e corrette

Test Case ID: UC3.2.1_TC2
Title: Ricerca scheda censimento con nome non esistente
Use Case ID: UC3.2.1
Priority: Media
Type: Negativo
Preconditions: UC3.2
Postconditions: Il sistema segnala che non ci sono risultati
Test Steps:
  1. Step: Inserisci un nome non presente nel database nella barra di ricerca
Expected: La pagina di risultati si carica senza errori
  2. Step: Conferma la ricerca
Expected: Il sistema visualizza un messaggio che indica l’assenza di risultati
  3. Step: Verifica il messaggio di feedback
Expected: Il messaggio è chiaro e utile per l’utente

Test Case ID: UC3.2.1_TC3
Title: Ricerca scheda censimento con campo nome vuoto
Use Case ID: UC3.2.1
Priority: Media
Type: Negativo
Preconditions: UC3.2
Postconditions: Il sistema richiede di inserire il nome
Test Steps:
  1. Step: Lascia vuota la barra di ricerca e conferma
Expected: Il sistema segnala l’errore di campo obbligatorio
  2. Step: Verifica il messaggio di errore
Expected: Il messaggio è chiaro e indica la necessità di inserire il nome
  3. Step: Inserisci un nome valido e ripeti la ricerca
Expected: La ricerca procede correttamente

Test Case ID: UC3.2.1_TC4
Title: Ricerca scheda censimento con caratteri speciali nel nome
Use Case ID: UC3.2.1
Priority: Bassa
Type: Edge
Preconditions: UC3.2
Postconditions: Il sistema gestisce correttamente i caratteri speciali
Test Steps:
  1. Step: Inserisci un nome contenente caratteri speciali nella barra di ricerca
Expected: La pagina di risultati si carica senza errori
  2. Step: Conferma la ricerca
Expected: I risultati della ricerca vengono visualizzati correttamente
  3. Step: Verifica l’accuratezza dei risultati
Expected: I risultati sono pertinenti e non ci sono errori di formattazione

Test Case ID: UC3.2.1_TC5
Title: Ricerca scheda censimento con nome lungo
Use Case ID: UC3.2.1
Priority: Bassa
Type: Boundary
Preconditions: UC3.2
Postconditions: Il sistema gestisce correttamente nomi lunghi
Test Steps:
  1. Step: Inserisci un nome molto lungo nella barra di ricerca
Expected: La pagina di risultati si carica senza problemi
  2. Step: Conferma la ricerca
Expected: I risultati della ricerca vengono visualizzati correttamente
  3. Step: Verifica che non ci siano errori di troncamento
Expected: Il nome è visualizzato per intero senza troncamenti

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-20 13:00:11,210 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-20 13:08:31,441 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-20 13:08:31,441 - test_code_generator.llm_client.ollama_client - INFO - model='llama3.3:latest' created_at='2025-06-20T13:08:31.440702088Z' done=True done_reason='stop' total_duration=500229310248 load_duration=13511496 prompt_eval_count=3444 prompt_eval_duration=9532164335 eval_count=3789 eval_duration=490677187146 message=Message(role='assistant', content='### UC3.2.1_TC1.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\n\nexport const insertValidNameInSearchBar = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC1_ID1\', \'Inserisci un nome valido nella barra di ricerca\', \'La pagina di risultati si carica correttamente\', \'Pagina caricata correttamente\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const confirmSearch = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC1_ID2\', \'Conferma la ricerca\', \'I risultati della ricerca vengono visualizzati\', \'Risultati visualizzati\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const viewCensusSheetDetails = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.clickAzioneDettaglio();\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC1_ID3\', \'Visualizza i dettagli delle schede censimento trovate\', \'Le informazioni sono complete e corrette\', \'Informazioni visualizzate\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toContain(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2.1_TC1.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\nimport { insertValidNameInSearchBar, confirmSearch, viewCensusSheetDetails } from \'./UC3.2.1_TC1.functions.js\';\n\ntest("UC3.2.1_TC1 - Ricerca scheda censimento per nome con risultati validi", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2.1_TC1", "Ricerca scheda censimento per nome con risultati validi");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n\n    await insertValidNameInSearchBar(page, reporter);\n    await confirmSearch(page, reporter);\n    await viewCensusSheetDetails(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2.1_TC2.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\n\nexport const insertNonExistingNameInSearchBar = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'NonExistingName\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC2_ID1\', \'Inserisci un nome non presente nel database nella barra di ricerca\', \'La pagina di risultati si carica senza errori\', \'Pagina caricata correttamente\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const confirmSearchWithNoResults = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC2_ID2\', \'Conferma la ricerca\', \'Il sistema visualizza un messaggio che indica l’assenza di risultati\', \'Messaggio visualizzato\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const verifyFeedbackMessage = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    // Verify feedback message\n    const feedbackMessage = await page.textContent(\'.feedback-message\');\n    expect(feedbackMessage).toContain(\'No results found\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC2_ID3\', \'Verifica il messaggio di feedback\', \'Il messaggio è chiaro e utile per l’utente\', \'Messaggio chiaro\', true, {}, executionTime);\n    }\n}\n```\n\n### UC3.2.1_TC2.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\nimport { insertNonExistingNameInSearchBar, confirmSearchWithNoResults, verifyFeedbackMessage } from \'./UC3.2.1_TC2.functions.js\';\n\ntest("UC3.2.1_TC2 - Ricerca scheda censimento con nome non esistente", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2.1_TC2", "Ricerca scheda censimento con nome non esistente");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n\n    await insertNonExistingNameInSearchBar(page, reporter);\n    await confirmSearchWithNoResults(page, reporter);\n    await verifyFeedbackMessage(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2.1_TC3.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\n\nexport const leaveSearchBarEmpty = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC3_ID1\', \'Lascia vuota la barra di ricerca e conferma\', \'Il sistema segnala l’errore di campo obbligatorio\', \'Errore segnalato\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const verifyErrorMessage = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    // Verify error message\n    const errorMessage = await page.textContent(\'.error-message\');\n    expect(errorMessage).toContain(\'Campo obbligatorio\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC3_ID2\', \'Verifica il messaggio di errore\', \'Il messaggio è chiaro e indica la necessità di inserire il nome\', \'Messaggio chiaro\', true, {}, executionTime);\n    }\n}\n\nexport const insertValidNameAndRepeatSearch = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC3_ID3\', \'Inserisci un nome valido e ripeti la ricerca\', \'La ricerca procede correttamente\', \'Ricerca procede\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n```\n\n### UC3.2.1_TC3.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\nimport { leaveSearchBarEmpty, verifyErrorMessage, insertValidNameAndRepeatSearch } from \'./UC3.2.1_TC3.functions.js\';\n\ntest("UC3.2.1_TC3 - Ricerca scheda censimento con campo nome vuoto", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2.1_TC3", "Ricerca scheda censimento con campo nome vuoto");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n\n    await leaveSearchBarEmpty(page, reporter);\n    await verifyErrorMessage(page, reporter);\n    await insertValidNameAndRepeatSearch(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2.1_TC4.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\n\nexport const insertNameWithSpecialCharacters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'Lucania!@#$\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC4_ID1\', \'Inserisci un nome contenente caratteri speciali nella barra di ricerca\', \'La pagina di risultati si carica senza errori\', \'Pagina caricata correttamente\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const confirmSearchWithSpecialCharacters = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC4_ID2\', \'Conferma la ricerca\', \'I risultati della ricerca vengono visualizzati correttamente\', \'Risultati visualizzati\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const verifyResultAccuracy = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    // Verify result accuracy\n    const results = await page.textContent(\'.results\');\n    expect(results).toContain(\'Lucania!@#$\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC4_ID3\', \'Verifica l’accuratezza dei risultati\', \'I risultati sono accurati e non contengono errori\', \'Risultati accurati\', true, {}, executionTime);\n    }\n}\n```\n\n### UC3.2.1_TC4.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\nimport { insertNameWithSpecialCharacters, confirmSearchWithSpecialCharacters, verifyResultAccuracy } from \'./UC3.2.1_TC4.functions.js\';\n\ntest("UC3.2.1_TC4 - Ricerca scheda censimento con caratteri speciali", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2.1_TC4", "Ricerca scheda censimento con caratteri speciali");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n\n    await insertNameWithSpecialCharacters(page, reporter);\n    await confirmSearchWithSpecialCharacters(page, reporter);\n    await verifyResultAccuracy(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```\n\n### UC3.2.1_TC5.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\n\nexport const insertLongName = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await selectCensusSheetMenu(page, null);\n    const censusSheetPage = new CensusSheetPage(page);\n    await censusSheetPage.searchByName(\'LucaniaVeryLongNameThatShouldBeTruncated\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC5_ID1\', \'Inserisci un nome lungo nella barra di ricerca\', \'La pagina di risultati si carica senza errori\', \'Pagina caricata correttamente\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const confirmSearchWithLongName = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    await page.waitForTimeout(1000);\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC5_ID2\', \'Conferma la ricerca\', \'I risultati della ricerca vengono visualizzati correttamente\', \'Risultati visualizzati\', true, {}, executionTime);\n    }\n\n    expect(await page.url()).toBe(process.env.E2E_CTS_URL);\n}\n\nexport const verifyResultTruncation = async function(page, reporter) {\n    const startTime = new Date().getTime();\n    \n    // Verify result truncation\n    const results = await page.textContent(\'.results\');\n    expect(results).toContain(\'LucaniaVeryLongNameThatShouldBe...\');\n\n    const endTime = new Date().getTime();\n    const executionTime = endTime - startTime;\n    if (reporter) {\n        reporter.addStep(\'UC3.2.1_TC5_ID3\', \'Verifica la troncatura dei risultati\', \'I risultati sono troncati correttamente\', \'Risultati troncati\', true, {}, executionTime);\n    }\n}\n```\n\n### UC3.2.1_TC5.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessPlatformAndAuthenticate, selectCensusSheetMenu } from \'../UC3/UC3_TC1.functions.js\';\nimport { insertLongName, confirmSearchWithLongName, verifyResultTruncation } from \'./UC3.2.1_TC5.functions.js\';\n\ntest("UC3.2.1_TC5 - Ricerca scheda censimento con nome lungo", async ({page, browserName}) => {\n    const reporter = new TestResultReporter();\n    reporter.setBrowserName(browserName);\n    reporter.setTestCase("UC3.2.1_TC5", "Ricerca scheda censimento con nome lungo");\n\n    await accessPlatformAndAuthenticate(page, reporter);\n\n    await insertLongName(page, reporter);\n    await confirmSearchWithLongName(page, reporter);\n    await verifyResultTruncation(page, reporter);\n\n    reporter.onTestEnd(test, { status: "passed" });     \n});\n```', images=None, tool_calls=None)
2025-06-20 13:08:31,441 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
