2025-05-14 12:44:03,105 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/base.txt
2025-05-14 12:44:03,105 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-14 12:44:03,105 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/pom/pom.js
2025-05-14 12:44:03,105 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-14 12:44:03,105 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in the test cases.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }

Use the following test parameters when creating scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. In each test script, call the reporter object methods as in the example below.
5. Put the code in functions for reusability

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC1_TC1
Title: Login con credenziali valide
Use Case ID: UC1
Priority: Alta
Type: Positivo
Preconditions: L’utente non è autenticato
Postconditions: L’utente è autenticato ed è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: Inserisci le credenziali corrette nel form di login
Expected: Le credenziali vengono accettate
  2. Step: Clicca il tasto “Login”
Expected: Il sistema procede con l’autenticazione
  3. Step: Verifica la visualizzazione del messaggio di successo
Expected: Viene mostrato un messaggio che conferma l’avvenuta autenticazione

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it.
2025-05-14 12:44:03,106 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-14 12:44:41,698 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-05-14 12:49:06,856 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 ```javascript
test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  const loginPage = new LoginPage(page);

  // Step 1: Inserisci le credenziali corrette nel form di login
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const expectedResultsStep1 = "Le credenziali vengono accettate";
  const actualResultsStep1 = "Credenziali inserite correttamente";
  const passFailStep1 = true;
  const parametersUsedStep1 = `Email: ${process.env.E2E_LOGIN_EMAIL_ADMIN}, Password: ${process.env.E2E_LOGIN_PASSWORD_ADMIN}`;
  const executionTimeStep1 = new Date().getTime();
  reporter.addStep(
    "UC1_TC1_ID1",
    "Inserisci le credenziali corrette nel form di login",
    expectedResultsStep1,
    actualResultsStep1,
    passFailStep1,
    parametersUsedStep1,
    executionTimeStep1
  );

  // Step 2: Clicca il tasto “Login”
  await loginPage.login();
  const expectedResultsStep2 = "Il sistema procede con l’autenticazione";
  const actualResultsStep2 = "Tasto Login cliccato correttamente";
  const passFailStep2 = true;
  const parametersUsedStep2 = "";
  const executionTimeStep2 = new Date().getTime();
  reporter.addStep(
    "UC1_TC1_ID2",
    "Clicca il tasto “Login”",
    expectedResultsStep2,
    actualResultsStep2,
    passFailStep2,
    parametersUsedStep2,
    executionTimeStep2
  );

  // Step 3: Verifica la visualizzazione del messaggio di successo
  const errorMessage = await loginPage.getErrorMessage();
  if (errorMessage === null) {
    const expectedResultsStep3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
    const actualResultsStep3 = "Messaggio di successo visualizzato correttamente";
    const passFailStep3 = true;
    const parametersUsedStep3 = "";
    const executionTimeStep3 = new Date().getTime();
    reporter.addStep(
      "UC1_TC1_ID3",
      "Verifica la visualizzazione del messaggio di successo",
      expectedResultsStep3,
      actualResultsStep3,
      passFailStep3,
      parametersUsedStep3,
      executionTimeStep3
    );
  } else {
    const expectedResultsStep3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
    const actualResultsStep3 = `Errore: ${errorMessage}`;
    const passFailStep3 = false;
    const parametersUsedStep3 = "";
    const executionTimeStep3 = new Date().getTime();
    reporter.addStep(
      "UC1_TC1_ID3",
      "Verifica la visualizzazione del messaggio di successo",
      expectedResultsStep3,
      actualResultsStep3,
      passFailStep3,
      parametersUsedStep3,
      executionTimeStep3
    );
  }

  if (passFailStep1 && passFailStep2 && passFailStep3) {
    reporter.onTestEnd(test, { status: "passed" });
  } else {
    reporter.onTestEnd(test, { status: "failed" });
  }
});
```
2025-05-14 12:49:06,856 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/base.txt
2025-05-14 12:49:06,856 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-14 12:49:06,856 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/pom/pom.js
2025-05-14 12:49:06,856 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-14 12:49:06,856 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in the test cases.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }

Use the following test parameters when creating scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. In each test script, call the reporter object methods as in the example below.
5. Put the code in functions for reusability

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC1_TC2
Title: Login con credenziali errate
Use Case ID: UC1
Priority: Alta
Type: Negativo
Preconditions: L’utente non è autenticato
Postconditions: Il sistema visualizza un messaggio di errore
Test Steps:
  1. Step: Inserisci credenziali non valide (username o password sbagliati)
Expected: Le credenziali vengono rifiutate
  2. Step: Clicca il tasto “Login”
Expected: Il sistema visualizza un messaggio di errore
  3. Step: Verifica la visualizzazione del messaggio di errore
Expected: Viene mostrato un messaggio che indica l’errore di autenticazione

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it.
2025-05-14 12:49:06,856 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-14 12:49:17,716 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-05-14 12:55:06,155 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 ```javascript
test("UC1_TC2 - Login con credenziali errate", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC2 - Login con credenziali errate");

  const loginPage = new LoginPage(page);

  // Step 1: Inserisci credenziali non valide (username o password sbagliati)
  const email = "wrong-email@example.com";
  const password = "wrong-password";
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(email);
  await loginPage.enterPassword(password);
  reporter.addStep(
    'UC1_TC2_ID1',
    'Inserisci credenziali non valide',
    `Credenziali inserite: email=${email}, password=${password}`,
    `Credenziali inserite: email=${email}, password=${password}`,
    true,
    { email, password },
    1000
  );

  // Step 2: Clicca il tasto “Login”
  await loginPage.login();
  reporter.addStep(
    'UC1_TC2_ID2',
    'Clicca il tasto “Login”',
    "Il sistema visualizza un messaggio di errore",
    "Il sistema visualizza un messaggio di errore",
    true,
    {},
    1000
  );

  // Step 3: Verifica la visualizzazione del messaggio di errore
  const errorMessage = await loginPage.getErrorMessage();
  reporter.addStep(
    'UC1_TC2_ID3',
    'Verifica la visualizzazione del messaggio di errore',
    "Viene mostrato un messaggio che indica l’errore di autenticazione",
    errorMessage,
    !!errorMessage,
    {},
    1000
  );

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-14 12:55:06,156 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/base.txt
2025-05-14 12:55:06,156 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-14 12:55:06,156 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/pom/pom.js
2025-05-14 12:55:06,156 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-14 12:55:06,156 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in the test cases.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }

Use the following test parameters when creating scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. In each test script, call the reporter object methods as in the example below.
5. Put the code in functions for reusability

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC1_TC3
Title: Login con campo username vuoto
Use Case ID: UC1
Priority: Media
Type: Negativo
Preconditions: L’utente non è autenticato
Postconditions: Il sistema visualizza un messaggio di errore
Test Steps:
  1. Step: Lascia vuoto il campo username e inserisci una password
Expected: Il sistema rileva l’errore
  2. Step: Clicca il tasto “Login”
Expected: Il sistema visualizza un messaggio di errore
  3. Step: Verifica la visualizzazione del messaggio di errore
Expected: Viene mostrato un messaggio che richiede di compilare tutti i campi

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it.
2025-05-14 12:55:06,156 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-14 12:55:16,454 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-05-14 12:57:42,209 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 ```javascript
test("UC1_TC3 - Login con campo username vuoto", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC3 - Login con campo username vuoto");

  const loginPage = new LoginPage(page);

  // Step 1: Lascia vuoto il campo username e inserisci una password
  await loginPage.displayLoginForm();
  await loginPage.enterEmail("");
  await loginPage.enterPassword(E2E_LOGIN_PASSWORD_ADMIN);
  reporter.addStep(
    "UC1_TC3_ID1",
    "Lascia vuoto il campo username e inserisci una password",
    "Il sistema rileva l'errore",
    "Il sistema non rileva l'errore",
    true,
    `Email: , Password: ${E2E_LOGIN_PASSWORD_ADMIN}`,
    1000
  );

  // Step 2: Clicca il tasto “Login”
  await loginPage.login();
  reporter.addStep(
    "UC1_TC3_ID2",
    "Clicca il tasto 'Login'",
    "Il sistema visualizza un messaggio di errore",
    "Il sistema non visualizza un messaggio di errore",
    true,
    "",
    1000
  );

  // Step 3: Verifica la visualizzazione del messaggio di errore
  const errorMessage = await loginPage.getErrorMessage();
  const expectedErrorMessage = "Viene mostrato un messaggio che richiede di compilare tutti i campi";
  reporter.addStep(
    "UC1_TC3_ID3",
    "Verifica la visualizzazione del messaggio di errore",
    expectedErrorMessage,
    errorMessage,
    errorMessage === expectedErrorMessage,
    "",
    1000
  );

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-14 12:57:42,209 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/base.txt
2025-05-14 12:57:42,210 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-14 12:57:42,210 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/pom/pom.js
2025-05-14 12:57:42,210 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-14 12:57:42,210 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in the test cases.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }

Use the following test parameters when creating scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. In each test script, call the reporter object methods as in the example below.
5. Put the code in functions for reusability

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC1_TC4
Title: Login con campo password vuoto
Use Case ID: UC1
Priority: Media
Type: Negativo
Preconditions: L’utente non è autenticato
Postconditions: Il sistema visualizza un messaggio di errore
Test Steps:
  1. Step: Inserisci il username e lascia vuoto il campo password
Expected: Il sistema rileva l’errore
  2. Step: Clicca il tasto “Login”
Expected: Il sistema visualizza un messaggio di errore
  3. Step: Verifica la visualizzazione del messaggio di errore
Expected: Viene mostrato un messaggio che richiede di compilare tutti i campi

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it.
2025-05-14 12:57:42,210 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-14 12:57:52,174 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-05-14 13:01:21,491 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 ```javascript
test("UC1_TC4 - Login con campo password vuoto", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC4 - Login con campo password vuoto");

  const loginPage = new LoginPage(page);

  // Step 1: Inserisci il username e lascia vuoto il campo password
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(E2E_LOGIN_EMAIL_ADMIN);
  const expectedResultsStep1 = "Il sistema rileva l’errore";
  const actualResultsStep1 = "Username inserted, password field empty";
  const passFailStep1 = true;
  const parametersUsedStep1 = `E2E_LOGIN_EMAIL_ADMIN: ${E2E_LOGIN_EMAIL_ADMIN}`;
  const executionTimeStep1 = new Date().getTime();
  reporter.addStep('UC1_TC4_ID1', 'Inserisci il username e lascia vuoto il campo password', expectedResultsStep1, actualResultsStep1, passFailStep1, parametersUsedStep1, executionTimeStep1);

  // Step 2: Clicca il tasto “Login”
  await loginPage.login();
  const expectedResultsStep2 = "Il sistema visualizza un messaggio di errore";
  const actualResultsStep2 = "Login button clicked";
  const passFailStep2 = true;
  const parametersUsedStep2 = "";
  const executionTimeStep2 = new Date().getTime();
  reporter.addStep('UC1_TC4_ID2', 'Clicca il tasto “Login”', expectedResultsStep2, actualResultsStep2, passFailStep2, parametersUsedStep2, executionTimeStep2);

  // Step 3: Verifica la visualizzazione del messaggio di errore
  const errorMessage = await loginPage.getErrorMessage();
  const expectedResultsStep3 = "Viene mostrato un messaggio che richiede di compilare tutti i campi";
  const actualResultsStep3 = errorMessage;
  const passFailStep3 = errorMessage.includes("compilare tutti i campi");
  const parametersUsedStep3 = "";
  const executionTimeStep3 = new Date().getTime();
  reporter.addStep('UC1_TC4_ID3', 'Verifica la visualizzazione del messaggio di errore', expectedResultsStep3, actualResultsStep3, passFailStep3, parametersUsedStep3, executionTimeStep3);

  if (passFailStep1 && passFailStep2 && passFailStep3) {
    reporter.onTestEnd(test, { status: "passed" });
  } else {
    reporter.onTestEnd(test, { status: "failed" });
  }
});
```
2025-05-14 13:01:21,491 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/base.txt
2025-05-14 13:01:21,491 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-14 13:01:21,491 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/pom/pom.js
2025-05-14 13:01:21,491 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-14 13:01:21,491 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test cases provided below and generate for each test case a complete and working Playwright test script in Javascript, following the steps described in the test cases.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }

Use the following test parameters when creating scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test cases provided
2. For each test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. In each test script, call the reporter object methods as in the example below.
5. Put the code in functions for reusability

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC1_TC5
Title: Cambio password alla prima autenticazione
Use Case ID: UC1
Priority: Alta
Type: Positivo
Preconditions: L’utente non è autenticato e si trova alla prima autenticazione
Postconditions: La password viene cambiata con successo
Test Steps:
  1. Step: Inserisci le credenziali di default per la prima volta
Expected: Il sistema richiede il cambio della password
  2. Step: Inserisci la nuova password e confermala
Expected: La password viene accettata e cambiata
  3. Step: Verifica che la nuova password sia attiva
Expected: Il sistema permette l’accesso con la nuova password

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it.
2025-05-14 13:01:21,491 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-14 13:01:31,764 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
