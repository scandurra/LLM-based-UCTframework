2025-05-26 13:43:41,386 - __main__ - INFO - Found 1 dependencies for use case UC2
2025-05-26 13:43:41,386 - __main__ - INFO - Read previously generated code for use case UC1 - test case UC1_TC1
2025-05-26 13:43:41,386 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/one_shot/raw.txt
2025-05-26 13:43:41,386 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-26 13:43:41,386 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:43:41,386 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:43:41,387 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async selectIssueCategory(cateogry) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_SUPPORT_URL="https://pell-portal.bologna.enea.it/support/result"
E2E_SUPPORT_SUCCESS_URL = "https://pell-portal.bologna.enea.it/support/result"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
const { test, expect } = require('@playwright/test');
const SupportPage = require('../../models/page_object_models/support-page');
const TestResultReporter = require('../../models/test-result-reporter');

const reporter = new TestResultReporter();

// Step 1
const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "Problemi account";
  const description = "Non riesco più ad accedere al mio account";
  const email = "test.region@pell.it"
  await supportPage.selectIssueCategory();
  await supportPage.enterIssueDescription();
  await supportPage.enterEmail();
  let endTime = Date.now();
  reporter.addStep(
    'UC10_TC1_ID2',
    'L'utente compila la form di assistenza',
    `Form compilata`,
    `Form compilata`,
    true,
    { category, description, email },
    endTime - startTime
  );
}

// Step 3
const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  reporter.addStep(
    'UC10_TC1_ID3',
    'Invia richiesta di assistenza',
    "L'utente viene reindirizzato alla pagina di avvenuto invio",
    testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto",
    testPass,
    {},
    endTime - startTime
  );

}

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1 - Invio richiesta di assistenza");

  const supportPage = new SupportPage(page);

  navigateToSupportPage(page, reporter);
  fillSupportForm(page, reporter);
  submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class HomePage {

    constructor(page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: 'Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }

    async navigateToCensimento() {
        await page.getByRole('link', { name: 'Scheda Censimento' }).click();
    }

    async clickOnProfile() {
        await page.getByLabel('user_data').click();
    }

    async changeLanguage() {
        await page.getByRole('link', { name: italianoFlagLink }).click();
        await page.getByRole('link', { name: ingleseFlagLink }).click();
    }
}

module.exports = HomePage;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const LoginPage = require('../../models/page_object_models/login-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToLoginPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_LOGIN_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_LOGIN_URL);
}

const fillLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID2', 'Inserisci le credenziali corrette nel form di login', `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, true, { email: process.env.E2E_LOGIN_EMAIL_ADMIN, password: '***' }, executionTime);
  }
}

const submitLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.login();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID3', 'Clicca il tasto “Login”', 'Il sistema procede con l’autenticazione', 'Il sistema procede con l’autenticazione', true, {}, executionTime);
  }
}

const verifyAuthenticationSuccess = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  const errorMessage = await loginPage.getErrorMessage();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID4', 'Verifica la visualizzazione del messaggio di successo', 'Viene mostrato un messaggio che conferma l’avvenuta autenticazione', errorMessage ? `Errore: ${errorMessage}` : 'Autenticazione avvenuta con successo', !errorMessage, {}, executionTime);
  }
  expect(errorMessage).toBeNull();
}

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  navigateToLoginPage(page, reporter);
  fillLoginForm(page, reporter);
  submitLoginForm(page, reporter);
  verifyAuthenticationSuccess(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC1
Title: Apertura della dashboard con utente autorizzato
Use Case ID: UC2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: L’utente visualizza la sezione relativa alla dashboard
Test Steps:
  1. Step: Accedi al sistema come utente registrato
Expected: La home page del sistema viene visualizzata
  2. Step: Seleziona la voce di menù per accedere alla dashboard
Expected: La sezione della dashboard si apre correttamente

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-26 13:43:41,387 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-26 13:46:04,663 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-26 13:46:04,663 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToHomePage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_BASE_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC1_ID1', 'Accedi al sistema come utente registrato', 'Home page del sistema visualizzata', 'Home page del sistema visualizzata', true, `E2E_BASE_URL: ${process.env.E2E_BASE_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_BASE_URL);
}

const navigateToDashboard = async function(page, reporter) {
  const homePage = new HomePage(page);
  const startTime = new Date().getTime();
  await homePage.navigateToDashboard();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù per accedere alla dashboard', 'Dashboard aperta correttamente', 'Dashboard aperta correttamente', true, {}, executionTime);
  }
}

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC1 - Apertura della dashboard con utente autorizzato");

  navigateToLoginPage(page, null);
  fillLoginForm(page, null);
  submitLoginForm(page, null);
  verifyAuthenticationSuccess(page, null);

  navigateToHomePage(page, reporter);
  navigateToDashboard(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-26 13:46:04,663 - test_code_generator.validator.javascript_code_validator - INFO - Starting JavaScript code cleaning
2025-05-26 13:46:04,663 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-05-26 13:46:04,663 - test_code_generator.validator.javascript_code_validator - INFO - Found 1 JavaScript code blocks with markdown syntax
2025-05-26 13:46:04,663 - test_code_generator.validator.javascript_code_validator - INFO - JavaScript code cleaning completed
2025-05-26 13:46:04,664 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/one_shot/raw.txt
2025-05-26 13:46:04,664 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-26 13:46:04,664 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:46:04,664 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:46:04,664 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async selectIssueCategory(cateogry) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_SUPPORT_URL="https://pell-portal.bologna.enea.it/support/result"
E2E_SUPPORT_SUCCESS_URL = "https://pell-portal.bologna.enea.it/support/result"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
const { test, expect } = require('@playwright/test');
const SupportPage = require('../../models/page_object_models/support-page');
const TestResultReporter = require('../../models/test-result-reporter');

const reporter = new TestResultReporter();

// Step 1
const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "Problemi account";
  const description = "Non riesco più ad accedere al mio account";
  const email = "test.region@pell.it"
  await supportPage.selectIssueCategory();
  await supportPage.enterIssueDescription();
  await supportPage.enterEmail();
  let endTime = Date.now();
  reporter.addStep(
    'UC10_TC1_ID2',
    'L'utente compila la form di assistenza',
    `Form compilata`,
    `Form compilata`,
    true,
    { category, description, email },
    endTime - startTime
  );
}

// Step 3
const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  reporter.addStep(
    'UC10_TC1_ID3',
    'Invia richiesta di assistenza',
    "L'utente viene reindirizzato alla pagina di avvenuto invio",
    testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto",
    testPass,
    {},
    endTime - startTime
  );

}

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1 - Invio richiesta di assistenza");

  const supportPage = new SupportPage(page);

  navigateToSupportPage(page, reporter);
  fillSupportForm(page, reporter);
  submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class HomePage {

    constructor(page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: 'Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }

    async navigateToCensimento() {
        await page.getByRole('link', { name: 'Scheda Censimento' }).click();
    }

    async clickOnProfile() {
        await page.getByLabel('user_data').click();
    }

    async changeLanguage() {
        await page.getByRole('link', { name: italianoFlagLink }).click();
        await page.getByRole('link', { name: ingleseFlagLink }).click();
    }
}

module.exports = HomePage;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const LoginPage = require('../../models/page_object_models/login-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToLoginPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_LOGIN_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_LOGIN_URL);
}

const fillLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID2', 'Inserisci le credenziali corrette nel form di login', `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, true, { email: process.env.E2E_LOGIN_EMAIL_ADMIN, password: '***' }, executionTime);
  }
}

const submitLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.login();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID3', 'Clicca il tasto “Login”', 'Il sistema procede con l’autenticazione', 'Il sistema procede con l’autenticazione', true, {}, executionTime);
  }
}

const verifyAuthenticationSuccess = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  const errorMessage = await loginPage.getErrorMessage();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID4', 'Verifica la visualizzazione del messaggio di successo', 'Viene mostrato un messaggio che conferma l’avvenuta autenticazione', errorMessage ? `Errore: ${errorMessage}` : 'Autenticazione avvenuta con successo', !errorMessage, {}, executionTime);
  }
  expect(errorMessage).toBeNull();
}

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  navigateToLoginPage(page, reporter);
  fillLoginForm(page, reporter);
  submitLoginForm(page, reporter);
  verifyAuthenticationSuccess(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC2
Title: Tentativo di accesso alla dashboard senza autorizzazione
Use Case ID: UC2
Priority: Media
Type: Negativo
Preconditions: UC1
Postconditions: L’accesso alla dashboard viene negato
Test Steps:
  1. Step: Accedi al sistema come ospite o utente non registrato
Expected: La home page del sistema viene visualizzata
  2. Step: Tenta di accedere direttamente alla dashboard tramite URL
Expected: Viene mostrata una pagina di accesso negato

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-26 13:46:04,664 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-26 13:47:37,809 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-26 13:47:37,809 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToHomePage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_BASE_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC2_ID1', 'Accedi al sistema come ospite o utente non registrato', 'Home page del sistema visualizzata', 'Home page del sistema visualizzata', true, `E2E_BASE_URL: ${process.env.E2E_BASE_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_BASE_URL);
}

const tryAccessDashboard = async function(page, reporter) {
  const homePage = new HomePage(page);
  const startTime = new Date().getTime();
  await page.goto(`${process.env.E2E_BASE_URL}dashboard`);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC2_ID2', 'Tenta di accedere direttamente alla dashboard tramite URL', 'Pagina di accesso negato visualizzata', page.url(), true, {}, executionTime);
  }
  expect(page.url()).not.toContain('dashboard');
}

test("UC2_TC2 - Tentativo di accesso alla dashboard senza autorizzazione", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC2 - Tentativo di accesso alla dashboard senza autorizzazione");

  navigateToLoginPage(page, null);
  fillLoginForm(page, null);
  submitLoginForm(page, null);

  navigateToHomePage(page, reporter);
  tryAccessDashboard(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-26 13:47:37,809 - test_code_generator.validator.javascript_code_validator - INFO - Starting JavaScript code cleaning
2025-05-26 13:47:37,809 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-05-26 13:47:37,809 - test_code_generator.validator.javascript_code_validator - INFO - Found 1 JavaScript code blocks with markdown syntax
2025-05-26 13:47:37,809 - test_code_generator.validator.javascript_code_validator - INFO - JavaScript code cleaning completed
2025-05-26 13:47:37,809 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/one_shot/raw.txt
2025-05-26 13:47:37,809 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-26 13:47:37,809 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:47:37,809 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:47:37,809 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async selectIssueCategory(cateogry) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_SUPPORT_URL="https://pell-portal.bologna.enea.it/support/result"
E2E_SUPPORT_SUCCESS_URL = "https://pell-portal.bologna.enea.it/support/result"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
const { test, expect } = require('@playwright/test');
const SupportPage = require('../../models/page_object_models/support-page');
const TestResultReporter = require('../../models/test-result-reporter');

const reporter = new TestResultReporter();

// Step 1
const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "Problemi account";
  const description = "Non riesco più ad accedere al mio account";
  const email = "test.region@pell.it"
  await supportPage.selectIssueCategory();
  await supportPage.enterIssueDescription();
  await supportPage.enterEmail();
  let endTime = Date.now();
  reporter.addStep(
    'UC10_TC1_ID2',
    'L'utente compila la form di assistenza',
    `Form compilata`,
    `Form compilata`,
    true,
    { category, description, email },
    endTime - startTime
  );
}

// Step 3
const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  reporter.addStep(
    'UC10_TC1_ID3',
    'Invia richiesta di assistenza',
    "L'utente viene reindirizzato alla pagina di avvenuto invio",
    testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto",
    testPass,
    {},
    endTime - startTime
  );

}

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1 - Invio richiesta di assistenza");

  const supportPage = new SupportPage(page);

  navigateToSupportPage(page, reporter);
  fillSupportForm(page, reporter);
  submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class HomePage {

    constructor(page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: 'Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }

    async navigateToCensimento() {
        await page.getByRole('link', { name: 'Scheda Censimento' }).click();
    }

    async clickOnProfile() {
        await page.getByLabel('user_data').click();
    }

    async changeLanguage() {
        await page.getByRole('link', { name: italianoFlagLink }).click();
        await page.getByRole('link', { name: ingleseFlagLink }).click();
    }
}

module.exports = HomePage;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const LoginPage = require('../../models/page_object_models/login-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToLoginPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_LOGIN_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_LOGIN_URL);
}

const fillLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID2', 'Inserisci le credenziali corrette nel form di login', `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, true, { email: process.env.E2E_LOGIN_EMAIL_ADMIN, password: '***' }, executionTime);
  }
}

const submitLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.login();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID3', 'Clicca il tasto “Login”', 'Il sistema procede con l’autenticazione', 'Il sistema procede con l’autenticazione', true, {}, executionTime);
  }
}

const verifyAuthenticationSuccess = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  const errorMessage = await loginPage.getErrorMessage();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID4', 'Verifica la visualizzazione del messaggio di successo', 'Viene mostrato un messaggio che conferma l’avvenuta autenticazione', errorMessage ? `Errore: ${errorMessage}` : 'Autenticazione avvenuta con successo', !errorMessage, {}, executionTime);
  }
  expect(errorMessage).toBeNull();
}

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  navigateToLoginPage(page, reporter);
  fillLoginForm(page, reporter);
  submitLoginForm(page, reporter);
  verifyAuthenticationSuccess(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC3
Title: Verifica della presenza di tutti gli elementi nella dashboard
Use Case ID: UC2
Priority: Alta
Type: Funzionalità
Preconditions: UC1
Postconditions: Tutti gli elementi della dashboard sono visualizzati correttamente
Test Steps:
  1. Step: Accedi alla dashboard come utente autorizzato
Expected: La dashboard si apre e mostra tutti i suoi elementi
  2. Step: Verifica la presenza di grafici, tabelle e altri contenuti previsti
Expected: Tutti gli elementi sono presenti e visualizzati correttamente

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-26 13:47:37,809 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-26 13:49:26,208 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-26 13:49:26,208 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToDashboard = async function(page, reporter) {
  const startTime = new Date().getTime();
  const homePage = new HomePage(page);
  await homePage.navigateToDashboard();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC3_ID1', 'Accedi alla dashboard come utente autorizzato', 'La dashboard si apre e mostra tutti i suoi elementi', 'La dashboard si apre e mostra tutti i suoi elementi', true, {}, executionTime);
  }
  expect(page.url()).toContain(process.env.E2E_BASE_URL);
}

const verifyDashboardElements = async function(page, reporter) {
  const startTime = new Date().getTime();
  const homePage = new HomePage(page);
  await page.waitForLoadState('networkidle');
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC3_ID2', 'Verifica la presenza di grafici, tabelle e altri contenuti previsti', 'Tutti gli elementi sono presenti e visualizzati correttamente', 'Tutti gli elementi sono presenti e visualizzati correttamente', true, {}, executionTime);
  }
  expect(await page.isVisible('text="Grafici"')).toBeTruthy();
  expect(await page.isVisible('text="Tabelle"')).toBeTruthy();
}

test("UC2_TC3 - Verifica della presenza di tutti gli elementi nella dashboard", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC3 - Verifica della presenza di tutti gli elementi nella dashboard");

  navigateToLoginPage(page, null);
  fillLoginForm(page, null);
  submitLoginForm(page, null);
  verifyAuthenticationSuccess(page, null);

  await new Promise(r => setTimeout(r, 1000));

  const homePage = new HomePage(page);
  await homePage.navigateToDashboard();

  navigateToDashboard(page, reporter);
  verifyDashboardElements(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-26 13:49:26,208 - test_code_generator.validator.javascript_code_validator - INFO - Starting JavaScript code cleaning
2025-05-26 13:49:26,208 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-05-26 13:49:26,208 - test_code_generator.validator.javascript_code_validator - INFO - Found 1 JavaScript code blocks with markdown syntax
2025-05-26 13:49:26,208 - test_code_generator.validator.javascript_code_validator - INFO - JavaScript code cleaning completed
2025-05-26 13:49:26,208 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/one_shot/raw.txt
2025-05-26 13:49:26,208 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-26 13:49:26,208 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:49:26,208 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:49:26,208 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async selectIssueCategory(cateogry) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_SUPPORT_URL="https://pell-portal.bologna.enea.it/support/result"
E2E_SUPPORT_SUCCESS_URL = "https://pell-portal.bologna.enea.it/support/result"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
const { test, expect } = require('@playwright/test');
const SupportPage = require('../../models/page_object_models/support-page');
const TestResultReporter = require('../../models/test-result-reporter');

const reporter = new TestResultReporter();

// Step 1
const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "Problemi account";
  const description = "Non riesco più ad accedere al mio account";
  const email = "test.region@pell.it"
  await supportPage.selectIssueCategory();
  await supportPage.enterIssueDescription();
  await supportPage.enterEmail();
  let endTime = Date.now();
  reporter.addStep(
    'UC10_TC1_ID2',
    'L'utente compila la form di assistenza',
    `Form compilata`,
    `Form compilata`,
    true,
    { category, description, email },
    endTime - startTime
  );
}

// Step 3
const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  reporter.addStep(
    'UC10_TC1_ID3',
    'Invia richiesta di assistenza',
    "L'utente viene reindirizzato alla pagina di avvenuto invio",
    testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto",
    testPass,
    {},
    endTime - startTime
  );

}

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1 - Invio richiesta di assistenza");

  const supportPage = new SupportPage(page);

  navigateToSupportPage(page, reporter);
  fillSupportForm(page, reporter);
  submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class HomePage {

    constructor(page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: 'Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }

    async navigateToCensimento() {
        await page.getByRole('link', { name: 'Scheda Censimento' }).click();
    }

    async clickOnProfile() {
        await page.getByLabel('user_data').click();
    }

    async changeLanguage() {
        await page.getByRole('link', { name: italianoFlagLink }).click();
        await page.getByRole('link', { name: ingleseFlagLink }).click();
    }
}

module.exports = HomePage;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const LoginPage = require('../../models/page_object_models/login-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToLoginPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_LOGIN_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_LOGIN_URL);
}

const fillLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID2', 'Inserisci le credenziali corrette nel form di login', `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, true, { email: process.env.E2E_LOGIN_EMAIL_ADMIN, password: '***' }, executionTime);
  }
}

const submitLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.login();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID3', 'Clicca il tasto “Login”', 'Il sistema procede con l’autenticazione', 'Il sistema procede con l’autenticazione', true, {}, executionTime);
  }
}

const verifyAuthenticationSuccess = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  const errorMessage = await loginPage.getErrorMessage();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID4', 'Verifica la visualizzazione del messaggio di successo', 'Viene mostrato un messaggio che conferma l’avvenuta autenticazione', errorMessage ? `Errore: ${errorMessage}` : 'Autenticazione avvenuta con successo', !errorMessage, {}, executionTime);
  }
  expect(errorMessage).toBeNull();
}

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  navigateToLoginPage(page, reporter);
  fillLoginForm(page, reporter);
  submitLoginForm(page, reporter);
  verifyAuthenticationSuccess(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC4
Title: Test di usabilità della dashboard su dispositivi mobili
Use Case ID: UC2
Priority: Media
Type: Usabilità
Preconditions: UC1
Postconditions: La dashboard è navigabile e leggibile sui dispositivi mobili
Test Steps:
  1. Step: Accedi alla dashboard utilizzando un dispositivo mobile
Expected: La dashboard si adatta allo schermo del dispositivo
  2. Step: Naviga tra le varie sezioni della dashboard
Expected: Tutte le funzionalità sono accessibili e utilizzabili

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-26 13:49:26,209 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-26 13:51:09,369 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-26 13:51:09,369 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToDashboard = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_BASE_URL);
  const homePage = new HomePage(page);
  await homePage.navigateToDashboard();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC4_ID1', 'Accedi alla dashboard utilizzando un dispositivo mobile', 'La dashboard si adatta allo schermo del dispositivo', 'La dashboard si adatta allo schermo del dispositivo', true, {}, executionTime);
  }
  expect(page.url()).toContain(process.env.E2E_BASE_URL);
}

const navigateThroughDashboardSections = async function(page, reporter) {
  const startTime = new Date().getTime();
  const homePage = new HomePage(page);
  await homePage.navigateToCensimento();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC4_ID2', 'Naviga tra le varie sezioni della dashboard', 'Tutte le funzionalità sono accessibili e utilizzabili', 'Tutte le funzionalità sono accessibili e utilizzabili', true, {}, executionTime);
  }
}

test("UC2_TC4 - Test di usabilità della dashboard su dispositivi mobili", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC4 - Test di usabilità della dashboard su dispositivi mobili");

  navigateToLoginPage(page, null);
  fillLoginForm(page, null);
  submitLoginForm(page, null);
  verifyAuthenticationSuccess(page, null);

  await page.emulateMedia({ media: 'screen' });
  await page.setViewportSize({ width: 375, height: 667 });

  navigateToDashboard(page, reporter);
  navigateThroughDashboardSections(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-26 13:51:09,369 - test_code_generator.validator.javascript_code_validator - INFO - Starting JavaScript code cleaning
2025-05-26 13:51:09,369 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-05-26 13:51:09,369 - test_code_generator.validator.javascript_code_validator - INFO - Found 1 JavaScript code blocks with markdown syntax
2025-05-26 13:51:09,369 - test_code_generator.validator.javascript_code_validator - INFO - JavaScript code cleaning completed
2025-05-26 13:51:09,369 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/one_shot/raw.txt
2025-05-26 13:51:09,369 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-26 13:51:09,369 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:51:09,369 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-26 13:51:09,370 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating test scripts, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async selectIssueCategory(cateogry) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_SUPPORT_URL="https://pell-portal.bologna.enea.it/support/result"
E2E_SUPPORT_SUCCESS_URL = "https://pell-portal.bologna.enea.it/support/result"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
const { test, expect } = require('@playwright/test');
const SupportPage = require('../../models/page_object_models/support-page');
const TestResultReporter = require('../../models/test-result-reporter');

const reporter = new TestResultReporter();

// Step 1
const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "Problemi account";
  const description = "Non riesco più ad accedere al mio account";
  const email = "test.region@pell.it"
  await supportPage.selectIssueCategory();
  await supportPage.enterIssueDescription();
  await supportPage.enterEmail();
  let endTime = Date.now();
  reporter.addStep(
    'UC10_TC1_ID2',
    'L'utente compila la form di assistenza',
    `Form compilata`,
    `Form compilata`,
    true,
    { category, description, email },
    endTime - startTime
  );
}

// Step 3
const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  reporter.addStep(
    'UC10_TC1_ID3',
    'Invia richiesta di assistenza',
    "L'utente viene reindirizzato alla pagina di avvenuto invio",
    testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto",
    testPass,
    {},
    endTime - startTime
  );

}

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1 - Invio richiesta di assistenza");

  const supportPage = new SupportPage(page);

  navigateToSupportPage(page, reporter);
  fillSupportForm(page, reporter);
  submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class HomePage {

    constructor(page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: 'Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }

    async navigateToCensimento() {
        await page.getByRole('link', { name: 'Scheda Censimento' }).click();
    }

    async clickOnProfile() {
        await page.getByLabel('user_data').click();
    }

    async changeLanguage() {
        await page.getByRole('link', { name: italianoFlagLink }).click();
        await page.getByRole('link', { name: ingleseFlagLink }).click();
    }
}

module.exports = HomePage;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const LoginPage = require('../../models/page_object_models/login-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToLoginPage = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_LOGIN_URL);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
  }
  expect(page.url()).toBe(process.env.E2E_LOGIN_URL);
}

const fillLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.displayLoginForm();
  await loginPage.enterEmail(process.env.E2E_LOGIN_EMAIL_ADMIN);
  await loginPage.enterPassword(process.env.E2E_LOGIN_PASSWORD_ADMIN);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID2', 'Inserisci le credenziali corrette nel form di login', `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, `Credenziali inserite: email=${process.env.E2E_LOGIN_EMAIL_ADMIN}, password=***`, true, { email: process.env.E2E_LOGIN_EMAIL_ADMIN, password: '***' }, executionTime);
  }
}

const submitLoginForm = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  await loginPage.login();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID3', 'Clicca il tasto “Login”', 'Il sistema procede con l’autenticazione', 'Il sistema procede con l’autenticazione', true, {}, executionTime);
  }
}

const verifyAuthenticationSuccess = async function(page, reporter) {
  const loginPage = new LoginPage(page);
  const startTime = new Date().getTime();
  const errorMessage = await loginPage.getErrorMessage();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC1_TC1_ID4', 'Verifica la visualizzazione del messaggio di successo', 'Viene mostrato un messaggio che conferma l’avvenuta autenticazione', errorMessage ? `Errore: ${errorMessage}` : 'Autenticazione avvenuta con successo', !errorMessage, {}, executionTime);
  }
  expect(errorMessage).toBeNull();
}

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

  navigateToLoginPage(page, reporter);
  fillLoginForm(page, reporter);
  submitLoginForm(page, reporter);
  verifyAuthenticationSuccess(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    step1(page, reporter);
    step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC5
Title: Verifica della compatibilità con browser differenti
Use Case ID: UC2
Priority: Alta
Type: Compatibilità
Preconditions: UC1
Postconditions: La dashboard è visualizzata correttamente su più browser
Test Steps:
  1. Step: Accedi alla dashboard utilizzando diversi browser (es. Chrome, Firefox, Edge)
Expected: La dashboard si apre e funziona correttamente in ogni browser
  2. Step: Verifica la presenza di eventuali problemi di visualizzazione o funzionalità
Expected: Non ci sono problemi significativi di compatibilità

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-26 13:51:09,370 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-26 13:52:50,627 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-26 13:52:50,627 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');

let reporter = new TestResultReporter();

const navigateToDashboard = async function(page, reporter) {
  const startTime = new Date().getTime();
  await page.goto(process.env.E2E_BASE_URL);
  const homePage = new HomePage(page);
  await homePage.navigateToDashboard();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC5_ID1', 'Accedi alla dashboard utilizzando diversi browser', 'La dashboard si apre e funziona correttamente in ogni browser', 'La dashboard si apre e funziona correttamente in ogni browser', true, `E2E_BASE_URL: ${process.env.E2E_BASE_URL}`, executionTime);
  }
  expect(page.url()).toContain('dashboard');
}

const verifyDashboardCompatibility = async function(page, reporter) {
  const startTime = new Date().getTime();
  const homePage = new HomePage(page);
  await homePage.navigateToCensimento();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC2_TC5_ID2', 'Verifica la presenza di eventuali problemi di visualizzazione o funzionalità', 'Non ci sono problemi significativi di compatibilità', 'Non ci sono problemi significativi di compatibilità', true, {}, executionTime);
  }
}

test("UC2_TC5 - Verifica della compatibilità con browser differenti", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC2_TC5 - Verifica della compatibilità con browser differenti");

  navigateToLoginPage(page, null);
  fillLoginForm(page, null);
  submitLoginForm(page, null);
  verifyAuthenticationSuccess(page, null);

  navigateToDashboard(page, reporter);
  verifyDashboardCompatibility(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-26 13:52:50,627 - test_code_generator.validator.javascript_code_validator - INFO - Starting JavaScript code cleaning
2025-05-26 13:52:50,627 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-05-26 13:52:50,627 - test_code_generator.validator.javascript_code_validator - INFO - Found 1 JavaScript code blocks with markdown syntax
2025-05-26 13:52:50,627 - test_code_generator.validator.javascript_code_validator - INFO - JavaScript code cleaning completed
