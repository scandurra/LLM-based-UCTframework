2025-06-12 12:20:45,211 - __main__ - INFO - Found 1 dependencies for use case UC2.1
2025-06-12 12:20:45,212 - __main__ - INFO - Read previously generated functions code for use case UC2 - test case UC2_TC1
2025-06-12 12:20:45,212 - __main__ - INFO - Read previously generated spec code for use case UC2 - test case UC2_TC1
2025-06-12 12:20:45,212 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-12 12:20:45,212 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-12 12:20:45,212 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/one_shot/codellama/previous_code_section.txt
2025-06-12 12:20:45,212 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, for legitimate software testing purposes of my own web application. 
The test script must follow the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
<page_object_model>
File: dashboard_page_pdf_download.js
export class DashboardPagePdfDownload {
	constructor(page) {
		this.page = page;

		// Selectors
		this.downloadPDFButton = this.page.getByRole('button', { name: 'Download PDF' });
	}

	async downloadPDF() {
		await this.downloadPDFButton.click();
	}

	async isDownloadButtonVisible() {
		return await this.downloadPDFButton.isVisible();
	}
}
</page_object_model>

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
// File: UC2_TC1.functions.js
import { SidebarPage } from '../../models/page_object_models/sidebar_page';

export const navigateToDashboard = async (page, reporter) => {
    let passFail = 0; // 1 se passato, 0 se fallito
    let startTime = Date.now();
    
    await page.goto(E2E_HOME_URL);
    const sidebarPage = new SidebarPage(page);
    await sidebarPage.clickDashboardLink();
    
    if (await page.url() === E2E_DASHBOARD_URL) {
        passFail = 1;
    }
    
    let endTime = Date.now();
    if (reporter) {
        reporter.addStep('UC2_TC1_ID1', 'Navigazione alla dashboard', 'Dashboard raggiunta con successo', passFail ? 'Dashboard raggiunta con successo' : 'Errore nella navigazione alla dashboard', passFail, {}, endTime - startTime);
    }
    
    expect(passFail).toBeTruthy();
};
// File: UC2_TC1.spec.js
import { test, expect } from '@playwright/test';

import { navigateToDashboard } from './UC2_TC1.functions.js';

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({ page }) => {
    await navigateToDashboard(page);
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC2.1_TC1.functions.js" and the test in a file called "UC2.1_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC2.1_TC1.spec.js" file to reference functions in "UC2.1_TC1.functions.js" generated file

<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await functionNameDescribingStep1(page, reporter);
    await functionNameDescribingStep2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
<test_case>
Test Case ID: UC2.1_TC1
Title: Download PDF con successo
Use Case ID: UC2.1
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente ha scaricato il file, può aprirlo dalla apposita sezione del browser utilizzato ed il file è ben formato
Test Steps:
  1. Step: Clicca sul tasto di download del PDF
Expected: Il processo di download inizia
  2. Step: Conferma la richiesta di download
Expected: Il file inizia a scaricarsi
  3. Step: Verifica il messaggio di completamento dell’operazione
Expected: Messaggio di successo visualizzato
</test_case>


Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using XML tags with "file" attribute containing the name

2025-06-12 12:20:45,212 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: codellama:70b
2025-06-12 12:25:37,473 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
