2025-06-22 11:10:10,919 - __main__ - INFO - Started execution for use case UC3.4.4 - test case ['UC3.4.4_TC1'] - model llama3.3:latest - configuration few_shot
2025-06-22 11:10:10,919 - __main__ - INFO - Found 1 dependencies for use case UC3.4.4
2025-06-22 11:10:10,919 - __main__ - INFO - Read previously generated functions code for use case UC3.4 - test case UC3.4_TC1
2025-06-22 11:10:10,919 - __main__ - INFO - Read previously generated spec code for use case UC3.4 - test case UC3.4_TC1
2025-06-22 11:10:10,919 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-22 11:10:10,919 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-22 11:10:10,919 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/few_shot/llama3.3/previous_code_section.txt
2025-06-22 11:10:10,920 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: 
ROLE: system
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.
------------------------------------------------------------------
ROLE: user
Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
```javascript
// File: support_page.js
export class SupportPage {
    constructor(page) {
      this.page = page;
      this.issueCategory = page.locator("#issue-category");
      this.issueDescription = page.locator("#issue-description");
      this.email = page.locator("#email");
      this.submit = page.getByRole("submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    // Category values: 'missing_credentials', 'other', 
    async selectIssueCategory(category) {
        await this.issueCategory.selectOption(category);
    }
  
    async enterIssueDescription(description) {
        await this.issueDescription.fill(description);
    }
  
    async enterEmail(email) {
        await this.email.fill(email);
    }
  
    async waitForErrorMessage() {
      await page.waitForSelector('.error-message');
    }

    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async submitIssue() {
        await this.submit.click();
    }
  } 
```

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC10_TC1.functions.js" and the test in a file called "UC10_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC10_TC1.spec.js" file to reference functions in "UC10_TC1.functions.js" generated file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC10_TC1
Title: Invia richiesta di assistenza
Use Case ID: UC10
Priority: Alta
Type: Positivo
Preconditions: Nessuna
Postconditions: L’utente è a conoscenza che l’operazione ha avuto successo
Test Steps:
  1. Step: L'utente naviga nella pagina di assistenza
Expected: La pagina di assistenza è visualizzata correttamente
  2. Step: L'utente compila la form di assistenza
Expected: Tutte le informazioni vengono accettate
  3. Step: Invia richiesta di assistenza
Expected: Si viene reindirizzati alla pagina di conferma

Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC10_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToSupportPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_SUPPORT_URL);
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('U101_TC1_ID1', 'Navigate to support page', 'Support page loaded', 'Support page loaded', true, `E2E_SUPPORT_URL: ${process.env.E2E_SUPPORT_URL}`, executionTime);
    }
}

// Step 2
export const fillSupportForm = async function(page, reporter) {
  const supportPage = new SupportPage(page);

  let startTime = Date.now();
  const category = "missing_credentials";
  const description = "Non riesco più ad accedere al mio account";
  const email = process.env.EMAIL;
  await supportPage.selectIssueCategory(category);
  await supportPage.enterIssueDescription(description);
  await supportPage.enterEmail(email);
  let endTime = Date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID2','L\'utente compila la form di assistenza', `Form compilata`, `Form compilata`, true, { category, description, email }, endTime - startTime );
  }
}

// Step 3
export const submitForm = async function (page, reporter) {
  const supportPage = new SupportPage(page);

  startTime = date.now();
  await supportPage.submitIssue();
  await page.waitForUrl(process.env.E2E_SUPPORT_SUCCESS_URL, { waitUnitl: "networkidle" });
  let testPass = page.url() == process.env.E2E_SUPPORT_SUCCESS_URL;
  endTime = date.now();
  if (reporter) {
    reporter.addStep('UC10_TC1_ID3', 'Invia richiesta di assistenza', "L'utente viene reindirizzato alla pagina di avvenuto invio", testPass ? "L'utente viene reindirizzato alla pagina di avvenuto invio" : "Nessun reindirizzamento avvenuto", testPass, {}, endTime - startTime);
  }

  expect(passFail).toBeTruthy();
}
```

### UC10_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { SupportPage } from '../../models/page_object_models/support_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToSupportPage, fillSupportForm, submitForm } import './UC10_TC1.functions.js';

const reporter = new TestResultReporter();

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1", "Invio richiesta di assistenza");

  await navigateToSupportPage(page, reporter);
  await fillSupportForm(page, reporter);
  await submitForm(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
}); 
```
------------------------------------------------------------------
ROLE: user
Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
```javascript
// File: report_energetici_page.js
export class ReportEnergeticiPage {  
    constructor(page) {
        this.page = page;
        this.fromDateInput = page.locator("#from-date");
        this.toDateInput = page.locator("#to-date");
        this.exportFormatSelect = page.locator("#export-format");
        this.exportButton = page.locator("#export-button");
    }
  
    async selectFromDate(date) {
        await this.fromDateInput.fill(date);
    }
  
    async selectToDate(date) {
        await this.toDateInput.fill(date);
    }
  
    // format can be 'csv' or 'pdf'
    async selectExportFormat(format) {
        await this.exportFormatSelect.selectOption(format);
    }
  
    async clickExportButton() {
        return await this.exportButton.click();
    }
}
```

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_SUPPORT_URL=""
E2E_SUPPORT_SUCCESS_URL = ""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';
import { LoginPage } from '../../models/page_object_models/login_page.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const navigateToLoginPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.goto(process.env.E2E_LOGIN_URL);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Navigate to login page', 'Login page loaded', 'Login page loaded', true, `E2E_LOGIN_URL: ${process.env.E2E_LOGIN_URL}`, executionTime);
    }
}

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.enterEmail(process.env.EMAIL);
    await loginPage.enterPassword(process.env.PASSWORD);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Insert correct credentials', 'Credentials accepted', 'Credentials accepted', true, `EMAIL: ${process.env.EMAIL}, PASSWORD: ${process.env.PASSWORD}`, executionTime);
    }

    await expect(loginPage.emailInput).toHaveValue(process.env.EMAIL);
    await expect(loginPage.passwordInput).toHaveValue(process.env.PASSWORD);
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.login();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Click login button', 'System proceeds with authentication', 'System proceeds with authentication', true, '', executionTime);
    }

    await expect(loginPage.authenticate).toBeDisabled();
}

export const verifySuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    const message = await loginPage.getErrorMessage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID4', 'Verify success message', 'Success message displayed', message, message !== null, '', executionTime);
    }

    await expect(message).not.toBeNull();
}

// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    await navigateToLoginPage(page, reporter);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC8.2.3_TC1.functions.js" and the test in a file called "UC8.2.3_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC8.2.3_TC1.spec.js" file to reference functions in "UC8.2.3_TC1.functions.js" generated file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC8.2.3_TC1
Title: Esportazione report in PDF con dati validi
Use Case ID: UC8.2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: Il file esportato viene scaricato correttamente
Test Steps:
  1. Step: Accedi alla pagina dei report energetici
Expected: La sezione viene visualizzata correttamente
  2. Step: Seleziona un periodo valido e il formato PDF
Expected: Le selezioni vengono accettate
  3. Step: Download del file
Expected: Il file PDF viene generato e scaricato


Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
------------------------------------------------------------------
ROLE: assistant
### UC8.2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';

// Step 1
export const navigateToReportEnergeticiPage = async function(page, reporter) {
  const startTime = new Date().getTime();
    await page.goto(process.env.E2E_REPORT_ENERGETICI_URL);
    const endTime = new Date().getTime();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC08_TC1_ID1', 'Navigate to report energetici page', 'Support page loaded', 'Support page loaded', true, `E2E_REPORT_ENERGETICI_URL: ${process.env.E2E_REPORT_ENERGETICI_URL}`, executionTime);
    }
}

// Step 2
export const selectPeriodAndFormat = async function(page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let startTime = Date.now();
  const fromDate = "2025-05-01";
  const toDate = "2025-05-30";
  const format = "csv"
  await reportEnergeticiPage.selectFromDate(fromDate);
  await reportEnergeticiPage.selectToDate(toDate);
  await reportEnergeticiPage.selectExportFormat(format);
  let endTime = Date.now();
  
  if (reporter) {
    reporter.addStep('UC8_TC1_ID2', 'L\'utente compila i campi', `Campi compilati`, `Campi compilati`, true, { fromDate, toDate, format }, endTime - startTime);
  }
}

// Step 3
export const exportFile = async function (page, reporter) {
  const reportEnergeticiPage = new ReportEnergeticiPage(page);

  let passFail = 0;  // 1 se passato, 0 se fallito
  let startTime = date.now();
  await reportEnergeticiPage.clickExportButton();
  await page.on('download', download => download.path().then(passFail = 1));
  let endTime = date.now();

  if (reporter) {
    reporter.addStep('UC8_TC1_ID3', 
      'Esportazione', 
      "Il file viene scaricato correttamente", 
      testPass ? "Il file viene scaricato correttamente" : "Errore nello scaricare il file",
      testPass,
      {},
      endTime - startTime
    );
  }

  expect(testPass).toBeTruthy();
}
```

### UC8.2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { ReportEnergeticiPage } from '../../models/page_object_models/report_energetici_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { navigateToReportEnergeticiPage, selectPeriodAndFormat, exportFile } from './UC8.2.3_TC1.functions.js'
import { navigateToLoginPage, insertCorrectCredentials, clickLoginButton, verifySuccessMessage } from '../UC1/UC1_TC1.functions.js'

test("UC10_TC1 - Invio richiesta di assistenza", async ({ page, browserName }) => {
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC10_TC1", "Invio richiesta di assistenza");

  // Reuse existing method in the prompt without redefining them
  await navigateToLoginPage(page, null);
  await insertCorrectCredentials(page, null);
  await clickLoginButton(page, null);
  await verifySuccessMessage(page, null);

  await navigateToReportEnergeticiPage(page, reporter);
  await selectPeriodAndFormat(page, reporter);
  await exportFile(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
------------------------------------------------------------------
ROLE: user
Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.

Use only this page object models for interacting with the DOM:
```javascript
File: census_sheet_page.js
const { timeout } = require('../../playwright.config');

export class CensusSheetPage {
  constructor(page) {
    this.page = page;
    this.path = require('path');
    
    // Locators
    this.searchInput = page.getByPlaceholder('Cerca');
    this.uploadButton = page.locator('#modal_upload_censustechsheet_btn');
    this.fileInput = page.locator('input[type="file"]');
    this.okButton = page.getByRole('button', { name: 'OK' });
    this.actionDropdown = page.locator('.text-start > .btn').first();
    this.downloadOption = page.locator('[data-kt-cts-table-filter="download_row"]').first();
    this.deleteOption = page.locator('[data-kt-cts-table-filter="delete_row"]').first();
    this.editOption = page.locator('[data-kt-cts-table-filter="edit_row"]').first();
    this.detailOption = page.locator('a[data-kt-cts-table-filter="detail_row"]').first();
    this.freezeOption = page.locator('a[data-action="freeze"]').first();
    this.confirmDeleteButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first();
    this.cancelDeleteButton = page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first();
    this.confirmButton = page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first();
    
    // Column headers
    this.azioniColumn = page.getByLabel('Azioni');
    this.schedaColumn = page.getByLabel('Scheda: attiva per ordinare');
    this.proprietarioColumn = page.getByLabel('Proprietario: attiva per');
    this.comuneColumn = page.getByLabel('Comune: attiva per ordinare');
    this.statsColumn = page.getByLabel('Stats: attiva per ordinare la');
    this.statoColumn = page.getByLabel('Stato: attiva per ordinare la');
    this.infoColumn = page.getByLabel('Info: attiva per ordinare la');
    this.creazioneColumn = page.getByLabel('Creazione: attiva per');
    this.aggiornamentoColumn = page.getByLabel('Aggiornamento: attiva per');
    this.sottomissioneColumn = page.getByLabel('Sottomissione: attiva per');
  }

  async clickAzioniColumn() {
    await this.azioniColumn.click({timeout: 300000});
  }

  async clickSchedaColumn() {
    await this.schedaColumn.click({timeout: 300000});
  }

  async clickProprietarioColumn() {
    await this.proprietarioColumn.click({timeout: 300000});
  }

  async clickComuneColumn() {
    await this.comuneColumn.click({timeout: 300000});
  }

  async clickStatsColumn() {
    await this.statsColumn.click({timeout: 300000});
  }

  async clickStatoColumn() {
    await this.statoColumn.click({timeout: 300000});
  }

  async clickInfoColumn() {
    await this.infoColumn.click({timeout: 300000});
  }

  async clickCreazioneColumn() {
    await this.creazioneColumn.click({timeout: 300000});
  }

  async clickAggiornamentoColumn() {
    await this.aggiornamentoColumn.click({timeout: 300000});
  }

  async clickSottomissioneColumn() {
    await this.sottomissioneColumn.click({timeout: 300000});
  }

  async searchByName(name = 'Lucania') {
    await this.page.getByPlaceholder('Cerca').click();
    await this.page.getByPlaceholder('Cerca').fill(name);
    await this.page.getByPlaceholder('Cerca').press('Enter');
  }

  async clickAzioniButton() {
    await this.page.locator('.text-start > .btn').first().waitFor({ state: 'visible' });

    // Ora possiamo cliccare sul pulsante
    await this.page.locator('.text-start > .btn').first().click();
  }

  async clickAzioneDownload() {
    await this.page.locator('[data-kt-cts-table-filter="download_row"]').first().click();
  }

  async clickAzioneDelete() {
    await this.page.locator('[data-kt-cts-table-filter="delete_row"]').first().click();
  }

  async clickConfirmAzioneDelete() {
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-danger').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickCancelAzioneDelete() {
    await this.page.locator('button.swal2-cancel.btn.fw-bold.btn-active-light-primary').first().click();
    await this.page.locator('button.swal2-confirm.btn.fw-bold.btn-primary').first().click();
  }

  async clickAzioneEdit() {
    await this.page.locator('[data-kt-cts-table-filter="edit_row"]').first().click();
  }

  async clickAzioneCongela() {
    await this.page.locator('a[data-action="freeze"]').first().click();
  }

  async clickAzioneDettaglio() {
    await this.page.locator('a[data-kt-cts-table-filter="detail_row"]').first().click();
  }
}
```

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
// File: UC3.4_TC1.functions.js
import { test, expect } from '@playwright/test';

import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessPlatformAndAuthenticate, selectCensusSheetMenuOption } from '../UC3/UC3_TC1.functions.js';

export const accessCensusSheetSection = async function(page, reporter) {
  const startTime = new Date().getTime();
  await accessPlatformAndAuthenticate(page, null);
  await selectCensusSheetMenuOption(page, null);
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC3.4_TC1_ID1', 'Access census sheet section', 'Census sheet list is visible', 'Census sheet list is visible', true, '', executionTime);
  }
}

export const clickAzioniButton = async function(page, reporter) {
  const startTime = new Date().getTime();
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioniButton();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC3.4_TC1_ID2', 'Click azioni button', 'Operations palette is visible', 'Operations palette is visible', true, '', executionTime);
  }
}
// File: UC3.4_TC1.spec.js
import { test, expect } from '@playwright/test';

import TestResultReporter from '../../models/test-result-reporter.js';

import { accessCensusSheetSection, clickAzioniButton } from './UC3.4_TC1.functions.js';

test("UC3.4_TC1 - Visualizzazione azioni disponibili sulla scheda censimento", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4_TC1", "Visualizzazione azioni disponibili sulla scheda censimento");

  // Call step functions in sequence
  await accessCensusSheetSection(page, reporter);
  await clickAzioniButton(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC3.4.4_TC1.functions.js" and the test in a file called "UC3.4.4_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC3.4.4_TC1.spec.js" file to reference functions in "UC3.4.4_TC1.functions.js" generated file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC3.4.4_TC1
Title: Congelamento scheda censimento con conferma
Use Case ID: UC3.4.4
Priority: Alta
Type: Positivo
Preconditions: UC3.4
Postconditions: La scheda viene congelata e lo stato è aggiornato a non attivo
Test Steps:
  1. Step: Seleziona l’operazione di congelamento della scheda
Expected: Viene visualizzata la richiesta di conferma
  2. Step: Conferma il congelamento della scheda
Expected: Viene visualizzato un messaggio di conferma dell’operazione
  3. Step: Verifica lo stato della scheda dopo il congelamento
Expected: La scheda è contrassegnata come non attiva


Output format:
* Output only valid and runnable JavaScript code
* Do not write code implementation provided in the prompt, only reference it
* Structure the code in files using markdown code blocks specifying the file name
2025-06-22 11:10:10,920 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-22 11:11:51,933 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-22 11:11:51,934 - test_code_generator.llm_client.ollama_client - INFO - model='llama3.3:latest' created_at='2025-06-22T11:11:51.9333146Z' done=True done_reason='stop' total_duration=101011710576 load_duration=13881464 prompt_eval_count=3405 prompt_eval_duration=9564657127 eval_count=707 eval_duration=91424282274 message=Message(role='assistant', content='### UC3.4.4_TC1.functions.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport { CensusSheetPage } from \'../../models/page_object_models/census_sheet_page.js\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessCensusSheetSection, clickAzioniButton } from \'../UC3.4/UC3.4_TC1.functions.js\';\n\nexport const selectFreezeOperation = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  await clickAzioniButton(page, null);\n  const censusSheetPage = new CensusSheetPage(page);\n  await censusSheetPage.clickAzioneCongela();\n  const endTime = new Date().getTime();\n  const executionTime = (endTime - startTime) / 1000;\n  if (reporter) {\n    reporter.addStep(\'UC3.4.4_TC1_ID1\', \'Select freeze operation\', \'Confirmation request is displayed\', \'Confirmation request is displayed\', true, \'\', executionTime);\n  }\n}\n\nexport const confirmFreezeOperation = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  const censusSheetPage = new CensusSheetPage(page);\n  await censusSheetPage.clickConfirmAzioneDelete();\n  const endTime = new Date().getTime();\n  const executionTime = (endTime - startTime) / 1000;\n  if (reporter) {\n    reporter.addStep(\'UC3.4.4_TC1_ID2\', \'Confirm freeze operation\', \'Confirmation message is displayed\', \'Confirmation message is displayed\', true, \'\', executionTime);\n  }\n}\n\nexport const verifySheetStatus = async function(page, reporter) {\n  const startTime = new Date().getTime();\n  const censusSheetPage = new CensusSheetPage(page);\n  await censusSheetPage.clickStatoColumn();\n  const endTime = new Date().getTime();\n  const executionTime = (endTime - startTime) / 1000;\n  if (reporter) {\n    reporter.addStep(\'UC3.4.4_TC1_ID3\', \'Verify sheet status\', \'Sheet is marked as non-active\', \'Sheet is marked as non-active\', true, \'\', executionTime);\n  }\n}\n```\n\n### UC3.4.4_TC1.spec.js\n```javascript\nimport { test, expect } from \'@playwright/test\';\nimport TestResultReporter from \'../../models/test-result-reporter.js\';\nimport { accessCensusSheetSection, clickAzioniButton } from \'../UC3.4/UC3.4_TC1.functions.js\';\nimport { selectFreezeOperation, confirmFreezeOperation, verifySheetStatus } from \'./UC3.4.4_TC1.functions.js\';\n\ntest("UC3.4.4_TC1 - Congelamento scheda censimento con conferma", async ({ page, browserName }) => {\n  const reporter = new TestResultReporter();\n  reporter.setBrowserName(browserName);\n  reporter.setTestCase("UC3.4.4_TC1", "Congelamento scheda censimento con conferma");\n\n  // Call step functions in sequence\n  await accessCensusSheetSection(page, reporter);\n  await clickAzioniButton(page, reporter);\n  await selectFreezeOperation(page, reporter);\n  await confirmFreezeOperation(page, reporter);\n  await verifySheetStatus(page, reporter);\n\n  reporter.onTestEnd(test, { status: "passed" });\n});\n```', images=None, tool_calls=None)
2025-06-22 11:11:51,934 - __main__ - INFO - Model response:
### UC3.4.4_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { CensusSheetPage } from '../../models/page_object_models/census_sheet_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3.4/UC3.4_TC1.functions.js';

export const selectFreezeOperation = async function(page, reporter) {
  const startTime = new Date().getTime();
  await clickAzioniButton(page, null);
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickAzioneCongela();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC3.4.4_TC1_ID1', 'Select freeze operation', 'Confirmation request is displayed', 'Confirmation request is displayed', true, '', executionTime);
  }
}

export const confirmFreezeOperation = async function(page, reporter) {
  const startTime = new Date().getTime();
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickConfirmAzioneDelete();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC3.4.4_TC1_ID2', 'Confirm freeze operation', 'Confirmation message is displayed', 'Confirmation message is displayed', true, '', executionTime);
  }
}

export const verifySheetStatus = async function(page, reporter) {
  const startTime = new Date().getTime();
  const censusSheetPage = new CensusSheetPage(page);
  await censusSheetPage.clickStatoColumn();
  const endTime = new Date().getTime();
  const executionTime = (endTime - startTime) / 1000;
  if (reporter) {
    reporter.addStep('UC3.4.4_TC1_ID3', 'Verify sheet status', 'Sheet is marked as non-active', 'Sheet is marked as non-active', true, '', executionTime);
  }
}
```

### UC3.4.4_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import TestResultReporter from '../../models/test-result-reporter.js';
import { accessCensusSheetSection, clickAzioniButton } from '../UC3.4/UC3.4_TC1.functions.js';
import { selectFreezeOperation, confirmFreezeOperation, verifySheetStatus } from './UC3.4.4_TC1.functions.js';

test("UC3.4.4_TC1 - Congelamento scheda censimento con conferma", async ({ page, browserName }) => {
  const reporter = new TestResultReporter();
  reporter.setBrowserName(browserName);
  reporter.setTestCase("UC3.4.4_TC1", "Congelamento scheda censimento con conferma");

  // Call step functions in sequence
  await accessCensusSheetSection(page, reporter);
  await clickAzioniButton(page, reporter);
  await selectFreezeOperation(page, reporter);
  await confirmFreezeOperation(page, reporter);
  await verifySheetStatus(page, reporter);

  reporter.onTestEnd(test, { status: "passed" });
});
```
2025-06-22 11:11:51,934 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
2025-06-22 11:11:51,935 - __main__ - INFO - File saved
