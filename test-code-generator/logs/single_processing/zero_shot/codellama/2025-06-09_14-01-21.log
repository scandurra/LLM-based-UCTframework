2025-06-09 14:01:21,490 - __main__ - INFO - Found 1 dependencies for use case UC2.3
2025-06-09 14:01:21,490 - __main__ - INFO - Read previously generated functions code for use case UC2 - test case UC2_TC1
2025-06-09 14:01:21,490 - __main__ - INFO - Read previously generated spec code for use case UC2 - test case UC2_TC1
2025-06-09 14:01:21,490 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/llama3.3/raw.txt
2025-06-09 14:01:21,490 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-09 14:01:21,490 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-09 14:01:21,490 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-09 14:01:21,490 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
```javascript
File: dashboard_page_general_data_table.js
export class DashboardPageGeneralDataTable {
  constructor(page) {
    this.page = page;
    
    // Table navigation selectors
    this.generalDataTable = this.page.getByText('Tabella Dati generaliNessun datoLoading...ComuneRegioneN° di Punti LuceConsumo');
    this.nextButton = this.page.getByLabel('Successivo');
    this.pageOneLink = this.page.getByRole('link', { name: '1' });
    this.elementsDropdown = this.page.getByLabel('Mostra 102550100 elementi');
    this.regionSortButton = this.page.getByLabel('Regione: attiva per ordinare');
    this.pointsLightSortButton = this.page.getByLabel('N° di Punti Luce: attiva per');
  }

  async getTableContent() {
    const content = await this.generalDataTable.allTextContents();
    return content[0];
  }

  async navigateToNextPage() {
    await this.nextButton.click();
  }

  async navigateToPageOne() {
    await this.pageOneLink.click();
  }

  async changeElementsPerPage(value = '25') {
    await this.elementsDropdown.selectOption(value);
  }

  async sortByRegion() {
    await this.regionSortButton.click();
  }

  async sortByPointsOfLight() {
    await this.pointsLightSortButton.click();
  }

  async isTableVisible() {
    return await this.generalDataTable.isVisible();
  }

  async isNextButtonVisible() {
    return await this.nextButton.isVisible();
  }

  async isElementsDropdownVisible() {
    return await this.elementsDropdown.isVisible();
  }

  async isSortButtonsVisible() {
    const regionVisible = await this.regionSortButton.isVisible();
    const pointsVisible = await this.pointsLightSortButton.isVisible();
    return regionVisible && pointsVisible;
  }
}

```

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC2_TC1.functions.js
import { test, expect } from '@playwright/test';

import { SidebarPage } from '../../models/page_object_models/sidebar_page.js';

import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from '../UC1/UC1_TC1.functions.js';

import TestResultReporter from '../../models/test-result-reporter.js';

export const accessPlatformAsRegisteredUser = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await insertCorrectCredentials(page, null);
    await clickLoginButton(page, null);
    await verifyAuthenticationSuccessMessage(page, null);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID1', 'Access the platform as a registered user', 'The home page of the platform is visible', 'The home page of the platform is visible', true, '', executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_HOME_URL);
}

export const selectDashboardMenu = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const sidebarPage = new SidebarPage(page);
    await sidebarPage.clickDashboardLink();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID2', 'Select the dashboard menu item', 'The dashboard section opens correctly', 'The dashboard section opens correctly', true, '', executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}
// File: UC2_TC1.spec.js
import { test, expect } from '@playwright/test';

import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';

import TestResultReporter from '../../models/test-result-reporter.js';

test("UC2_TC1 - Open dashboard with authorized user", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2_TC1 - Open dashboard with authorized user");

    // Navigate to login page
    await page.goto(process.env.E2E_LOGIN_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
```

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC2.3_TC1.functions.js" and the test in a file called "UC2.3_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC2.3_TC1.spec.js" file to reference functions in "UC2.3_TC1.functions.js" generated file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2.3_TC1
Title: Visualizzazione tabella dati generali con impostazioni predefinite
Use Case ID: UC2.3
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente visualizza le informazioni corrispondenti alla paginazione richiesta
Test Steps:
  1. Step: Accedi alla sezione dashboard tramite il menù apposito
Expected: La sezione dashboard viene visualizzata correttamente
  2. Step: Scorri nella pagina fino a visualizzare la sezione tabellare dedicata ai dati generali
Expected: La tabella dei dati generali è visibile e contiene le informazioni attese
  3. Step: Verifica che sia possibile scorrere tra i comuni disponibili e modificare gli elementi visualizzati per pagina
Expected: Le funzionalità di scrolling e selezione del numero di elementi per pagina funzionano correttamente

Output only valid and runnable JavaScript code. Do not copy existing code implementation in the response, only reference it. Specify the different files using different markdown blocks.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-06-09 14:01:21,490 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-09 14:05:28,323 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-06-09 14:05:28,324 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 246831332097 time, with 1852 tokens in prompt and 871 tokens in response. Content:
 

### UC2.3_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { DashboardPageGeneralDataTable } from '../../models/page_object_models/dashboard_page_general_data_table.js';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

export const scrollDownToGeneralDataSection = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await page.evaluate(() => {
        window.scrollTo(0, document.body.scrollHeight);
    });
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.3_TC1_ID1', 'Scroll down to general data section', 'The general data table is visible', 'The general data table is visible', true, '', executionTime);
    }

    expect(await new DashboardPageGeneralDataTable(page).isTableVisible()).toBe(true);
}

export const verifyGeneralDataContent = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPageGeneralDataTable = new DashboardPageGeneralDataTable(page);
    await expect(await dashboardPageGeneralDataTable.getTableContent()).toContain('Comune');
    await expect(await dashboardPageGeneralDataTable.getTableContent()).toContain('Regione');
    await expect(await dashboardPageGeneralDataTable.getTableContent()).toContain('N° di Punti Luce');
    await expect(await dashboardPageGeneralDataTable.getTableContent()).toContain('Consumo');
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.3_TC1_ID2', 'Verify general data content', 'The general data table contains the expected information', 'The general data table contains the expected information', true, '', executionTime);
    }
}

export const verifyPaginationAndElementsPerPage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const dashboardPageGeneralDataTable = new DashboardPageGeneralDataTable(page);
    await expect(await dashboardPageGeneralDataTable.isNextButtonVisible()).toBe(true);
    await expect(await dashboardPageGeneralDataTable.isElementsDropdownVisible()).toBe(true);
    await dashboardPageGeneralDataTable.changeElementsPerPage('50');
    await expect(await dashboardPageGeneralDataTable.getTableContent()).toContain('Comune');
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2.3_TC1_ID3', 'Verify pagination and elements per page', 'The pagination and elements per page functionality works correctly', 'The pagination and elements per page functionality works correctly', true, '', executionTime);
    }
}
```

### UC2.3_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { accessPlatformAsRegisteredUser, selectDashboardMenu } from './UC2_TC1.functions.js';
import { scrollDownToGeneralDataSection, verifyGeneralDataContent, verifyPaginationAndElementsPerPage } from './UC2.3_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC2.3_TC1 - Visualizzazione tabella dati generali con impostazioni predefinite", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2.3_TC1 - Visualizzazione tabella dati generali con impostazioni predefinite");

    // Navigate to login page
    await page.goto(process.env.E2E_LOGIN_URL);

    // Call step functions in sequence
    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);
    await scrollDownToGeneralDataSection(page, reporter);
    await verifyGeneralDataContent(page, reporter);
    await verifyPaginationAndElementsPerPage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
```
2025-06-09 14:05:28,324 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
