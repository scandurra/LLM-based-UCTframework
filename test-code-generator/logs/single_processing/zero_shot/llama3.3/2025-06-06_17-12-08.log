2025-06-06 17:12:08,502 - __main__ - INFO - Found 1 dependencies for use case UC2
2025-06-06 17:12:08,502 - __main__ - INFO - Read previously generated code for use case UC1 - test case UC1_TC1
2025-06-06 17:12:08,964 - __main__ - INFO - Found 1 dependencies for use case UC2.1
2025-06-06 17:12:08,964 - __main__ - INFO - Read previously generated code for use case UC2 - test case UC2_TC1
2025-06-06 17:12:08,964 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/llama3.3/raw.txt
2025-06-06 17:12:08,964 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-06 17:12:08,964 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-06 17:12:08,964 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-06 17:12:08,964 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class DashboardPagePdfDownload {
	constructor(page) {
		this.page = page;

		// Selectors
		this.downloadPDFButton = this.page.getByRole('button', { name: 'Download PDF' });
	}

	async downloadPDF() {
		await this.downloadPDFButton.click();
	}

	async isDownloadButtonVisible() {
		return await this.downloadPDFButton.isVisible();
	}
}

module.exports = DashboardPagePdfDownload;

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
const { test, expect } = require('@playwright/test');
const HomePage = require('../../models/page_object_models/home-page');
const TestResultReporter = require('../../models/test-result-reporter');
const UC1_TC1 = require('../.././output/single_processing/zero_shot/llama3.3/UC1/UC1_TC1.spec.js');

const accessPlatformAsRegisteredUser = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await fillCorrectCredentials(page, null);
    await clickLoginButton(page, null);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID1', 'Accedi alla piattaforma come utente registrato', true, page.url() === process.env.E2E_HOME_URL, true, '', executionTime);
    }

    expect(page.url()).toBe(process.env.E2E_HOME_URL);
}

const selectDashboardMenu = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const homePage = new HomePage(page);
    await homePage.navigateToDashboard();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù relativa alla dashboard', true, page.url() === process.env.E2E_DASHBOARD_URL, true, '', executionTime);
    }

    expect(page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2_TC1 - Apertura della dashboard con utente autorizzato");

    await page.goto(process.env.E2E_BASE_URL);

    await accessPlatformAsRegisteredUser(page, reporter);
    await selectDashboardMenu(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });
});
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/"
6. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods.
7. Do not rewrite functions provided in the prompt, just refer to them.

<example>
const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2.1_TC1
Title: Download PDF con successo
Use Case ID: UC2.1
Priority: Alta
Type: Positivo
Preconditions: UC2
Postconditions: L’utente ha scaricato il file, può aprirlo dalla apposita sezione del browser utilizzato ed il file è ben formato
Test Steps:
  1. Step: Clicca sul tasto di download del PDF
Expected: Il processo di download inizia
  2. Step: Conferma la richiesta di download
Expected: Il file inizia a scaricarsi
  3. Step: Verifica il messaggio di completamento dell’operazione
Expected: Messaggio di successo visualizzato

Output only valid and runnable JavaScript code with no explanations or markdown formatting. Do not copy existing code implementation in the response, only reference it.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-06-06 17:12:08,964 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
