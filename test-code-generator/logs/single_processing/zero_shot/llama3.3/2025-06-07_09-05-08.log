2025-06-07 09:05:08,552 - __main__ - INFO - Found 1 dependencies for use case UC2
2025-06-07 09:05:08,552 - __main__ - INFO - Read previously generated code for use case UC1 - test case UC1_TC1
2025-06-07 09:05:08,552 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/llama3.3/raw.txt
2025-06-07 09:05:08,552 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-07 09:05:08,552 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-07 09:05:08,552 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-07 09:05:08,552 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
class SidebarPage {
  constructor(page) {
    this.page = page;
    
    // Locators
    this.dashboardLink = page.getByRole('link', { name: ' Dashboard' });
    this.censusSheetLink = page.getByRole('link', { name: ' Scheda Censimento' });
  }

  // Login flow methods
  async clickDashboardLink() {
    await this.dashboardLink.click();
  }

  async clickCensusSheetLink() {
    await this.censusSheetLink.click();
  }
}

module.exports = SidebarPage;


Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
<code>
import { LoginPage } from "../../models/page_object_models/login";
import { TestResultReporter } from "../../models/test-result-reporter";

export const loginWithCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.fillEmail(process.env.EMAIL);
    await loginPage.fillPassword(process.env.PASSWORD);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Inserisci le credenziali corrette nel form di login', true, await loginPage.isEmailFieldVisible(), true, `EMAIL: ${process.env.EMAIL}, PASSWORD: ${process.env.PASSWORD}`, executionTime);
    }

    expect(await loginPage.isEmailFieldVisible()).toBe(true);
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.clickLoginButton();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Clicca il tasto “Login”', true, true, true, '', executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_HOME_URL);
}

export const verifySuccessfulAuthentication = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    // Assuming there's a way to check for the success message
    // For demonstration purposes, we'll just check if the URL is correct
    expect(await page.url()).toBe(process.env.E2E_HOME_URL);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Visualizza il messaggio di operazione completata con successo', true, true, true, '', executionTime);
    }
}
</code>

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "functions.js" and the test in a file called "spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for Playwright, TestResultReporter from "../../models/test-result-reporter", page object models from "../../models/page_object_models/" and make the "spec.js" file to reference functions in "functions.js" file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(condition);
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC1
Title: Apertura della dashboard con utente autorizzato
Use Case ID: UC2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: La dashboard viene visualizzata correttamente
Test Steps:
  1. Step: Accedi alla piattaforma come utente registrato
Expected: La home page della piattaforma è visibile
  2. Step: Seleziona la voce di menù relativa alla dashboard
Expected: La sezione della dashboard si apre correttamente

Output only valid and runnable JavaScript code. Do not copy existing code implementation in the response, only reference it. Specify the different files using different markdown blocks.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-06-07 09:05:08,552 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-07 09:07:14,602 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-06-07 09:07:14,602 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 126047686507 time, with 1310 tokens in prompt and 489 tokens in response. Content:
 

### functions.js
```javascript
import { SidebarPage } from "../../models/page_object_models/sidebar";
import { loginWithCorrectCredentials, clickLoginButton, verifySuccessfulAuthentication } from "./login-functions";

export const openDashboard = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const sidebarPage = new SidebarPage(page);
    await sidebarPage.clickDashboardLink();

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù relativa alla dashboard', true, await page.url() === process.env.E2E_DASHBOARD_URL, true, '', executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_DASHBOARD_URL);
}

export const accessPlatform = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    await loginWithCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifySuccessfulAuthentication(page, reporter);

    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC2_TC1_ID1', 'Accedi alla piattaforma come utente registrato', true, await page.url() === process.env.E2E_HOME_URL, true, '', executionTime);
    }

    expect(await page.url()).toBe(process.env.E2E_HOME_URL);
}
```

### spec.js
```javascript
import { test, expect } from '@playwright/test';
import { accessPlatform, openDashboard } from "./functions";
import { TestResultReporter } from "../../models/test-result-reporter";

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2_TC1 - Apertura della dashboard con utente autorizzato");

    // Call step functions in sequence
    await accessPlatform(page, reporter);
    await openDashboard(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
```
2025-06-07 09:07:14,602 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
