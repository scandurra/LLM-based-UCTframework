2025-06-10 11:21:20,465 - __main__ - INFO - Found 1 dependencies for use case UC5
2025-06-10 11:21:20,465 - __main__ - INFO - Read previously generated functions code for use case UC1 - test case UC1_TC1
2025-06-10 11:21:20,465 - __main__ - INFO - Read previously generated spec code for use case UC1 - test case UC1_TC1
2025-06-10 11:21:20,465 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/llama3.3/raw.txt
2025-06-10 11:21:20,465 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-06-10 11:21:20,465 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-06-10 11:21:20,465 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./prompts/single_processing/zero_shot/llama3.3/previous_code_section.txt
2025-06-10 11:21:20,465 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
```javascript
File: navbar_page.js
export class NavbarPage {
  constructor(page) {
    const italianoFlagLink = ' Lingua Italiano flag';
    const ingleseFlagLink = 'flag Inglese';

    this.page = page;

    this.userIcon = page.getByLabel('user_data');
    this.englishLanguageSelection = page.getByRole('link', { name: italianoFlagLink });
    this.italianLanguageSelection = page.getByRole('link', { name: ingleseFlagLink });
    this.logoutSelection = page.getByRole('link', { name: ' Logout' });
  }

  async clickUserIcon() {
    await this.userIcon.click();
  }

  async selectItalianLanguage() {
    await this.englishItalianSelection.click();
  }

  async selectEnglishLanguage() {
    await this.englishLanguageSelection.click();
  }

  async isEnglishLanguageSelected() {
    return await this.englishLanguageSelection.isVisible();
  }

  async clickLogout() {
    this.logoutSelection.click();
  }
}
```

Use only the following parameters from environment variables in the test scripts:
E2E_BASE_URL=""
E2E_LOGIN_URL=""
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
EMAIL=""
PASSWORD=""

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, reuse this functions passing null as reporter parameter:
```javascript
// File: UC1_TC1.functions.js
import { test, expect } from '@playwright/test';

import { LoginPage } from '../../models/page_object_models/login_page.js';

import TestResultReporter from '../../models/test-result-reporter.js';

export const insertCorrectCredentials = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.fillEmail(process.env.EMAIL);
    await loginPage.fillPassword(process.env.PASSWORD);
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    let passFail = true;
    if (!(await loginPage.isEmailFieldVisible())) {
        passFail = false;
    }
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Insert correct credentials in the login form', true, passFail, passFail, `EMAIL: ${process.env.EMAIL}, PASSWORD: ${process.env.PASSWORD}`, executionTime);
    }

    expect(passFail).toBeTruthy();
}

export const clickLoginButton = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const loginPage = new LoginPage(page);
    await loginPage.clickLoginButton();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    let passFail = true;
    // Add assertion to check if the user is authenticated
    if (!(await page.url().includes(process.env.E2E_HOME_URL))) {
        passFail = false;
    }
    if (reporter) {
        reporter.addStep('UC1_TC1_ID2', 'Click the login button', true, passFail, passFail, '', executionTime);
    }

    expect(passFail).toBeTruthy();
}

export const verifyAuthenticationSuccessMessage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    // Add implementation to check for authentication success message
    let passFail = true;
    if (!(await page.url().includes(process.env.E2E_HOME_URL))) {
        passFail = false;
    }
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID3', 'Verify authentication success message', true, passFail, passFail, '', executionTime);
    }

    expect(passFail).toBeTruthy();
}
// File: UC1_TC1.spec.js
import { test, expect } from '@playwright/test';

import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from './UC1_TC1.functions.js';

import TestResultReporter from '../../models/test-result-reporter.js';

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Navigate to login page
    await page.goto(process.env.E2E_LOGIN_URL);

    // Call step functions in sequence
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifyAuthenticationSuccessMessage(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
```

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the TestResultReporter object methods as described below.
5. Put the code in functions for reusability, with the reporter object as parameter not mandatory. If not null, call reporter methods. 
6. Put functions in a separate file called "UC5_TC1.functions.js" and the test in a file called "UC5_TC1.spec.js"
7. Do not rewrite functions provided in the prompt, just refer to them.
8. Add the required import for:
    * test, expect, ... from '@playwright/test' in all files
    * TestResultReporter from "../../models/test-result-reporter.js" 
    * page object models from "../../models/page_object_models/<page_object_model_name>.js" 
    * existing code from the path specified in the code snippet. Pay attention to add imports used also by the existing code. 
    * make the generated "UC5_TC1.spec.js" file to reference functions in "UC5_TC1.functions.js" generated file


<example>
export const functionNameDescribingStep = async function(page, reporter) {
    const startTime = DateTime.now();
    
    // Put here test case step implementation
    
    const endTime = DateTime.now();
    const executionTime = endTime - startTime;
    if (reporter) {
        reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);
    }

    // Include Playwright assertions
    expect(passFail).toBeTruthy();
}

test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1", "Login test with success");

    // Call step functions in sequence
    await step1(page, reporter);
    await step2(page, reporter);
    // Additional steps...

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC5_TC1
Title: Selezione lingua italiana
Use Case ID: UC5
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: L’utente visualizza il portale con la lingua selezionata
Test Steps:
  1. Step: Accedi al portale e clicca sul proprio nome utente in alto a destra
Expected: Il menù appare correttamente
  2. Step: Seleziona la lingua italiana dal menù a tendina
Expected: La selezione viene accettata
  3. Step: Verifica che dopo il ricaricamento della pagina, il portale sia visualizzato in italiano
Expected: Il portale è completamente tradotto in italiano

Output only valid and runnable JavaScript code. Do not copy existing code implementation in the response, only reference it. Specify the different files using different markdown blocks.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-06-10 11:21:20,466 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3:latest
2025-06-10 11:24:44,033 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-06-10 11:24:44,034 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded in 203566075005 time, with 1793 tokens in prompt and 730 tokens in response. Content:
 

### UC5_TC1.functions.js
```javascript
import { test, expect } from '@playwright/test';
import { NavbarPage } from '../../models/page_object_models/navbar_page.js';
import TestResultReporter from '../../models/test-result-reporter.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from './UC1_TC1.functions.js';

export const clickOnUsername = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const navbarPage = new NavbarPage(page);
    await navbarPage.clickUserIcon();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    let passFail = true;
    if (!(await navbarPage.userIcon.isVisible())) {
        passFail = false;
    }
    if (reporter) {
        reporter.addStep('UC5_TC1_ID1', 'Click on username', true, passFail, passFail, '', executionTime);
    }

    expect(passFail).toBeTruthy();
}

export const selectItalianLanguage = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    const navbarPage = new NavbarPage(page);
    await navbarPage.selectItalianLanguage();
    
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    let passFail = true;
    if (!(await navbarPage.italianLanguageSelection.isVisible())) {
        passFail = false;
    }
    if (reporter) {
        reporter.addStep('UC5_TC1_ID2', 'Select Italian language', true, passFail, passFail, '', executionTime);
    }

    expect(passFail).toBeTruthy();
}

export const verifyItalianLanguageSelected = async function(page, reporter) {
    const startTime = new Date().getTime();
    
    let passFail = true;
    if (!(await page.url().includes(process.env.E2E_HOME_URL))) {
        passFail = false;
    }
    const endTime = new Date().getTime();
    const executionTime = (endTime - startTime) / 1000;
    if (reporter) {
        reporter.addStep('UC5_TC1_ID3', 'Verify Italian language selected', true, passFail, passFail, '', executionTime);
    }

    expect(passFail).toBeTruthy();
}
```

### UC5_TC1.spec.js
```javascript
import { test, expect } from '@playwright/test';
import { clickOnUsername, selectItalianLanguage, verifyItalianLanguageSelected } from './UC5_TC1.functions.js';
import { insertCorrectCredentials, clickLoginButton, verifyAuthenticationSuccessMessage } from './UC1_TC1.functions.js';
import TestResultReporter from '../../models/test-result-reporter.js';

test("UC5_TC1 - Select Italian language", async ({page, browserName}) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC5_TC1", "Select Italian language");

    // Preconditions: UC1
    await page.goto(process.env.E2E_LOGIN_URL);
    await insertCorrectCredentials(page, reporter);
    await clickLoginButton(page, reporter);
    await verifyAuthenticationSuccessMessage(page, reporter);

    // Test Steps
    await clickOnUsername(page, reporter);
    await selectItalianLanguage(page, reporter);
    await verifyItalianLanguageSelected(page, reporter);

    reporter.onTestEnd(test, { status: "passed" });     // status can be "passed" or "failed" 
});
```
2025-06-10 11:24:44,034 - test_code_generator.validator.javascript_code_validator - INFO - Extracting JavaScript code blocks
