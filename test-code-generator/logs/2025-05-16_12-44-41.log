2025-05-16 12:44:41,665 - __main__ - INFO - Found 1 dependencies for use case UC2
2025-05-16 12:44:41,665 - __main__ - INFO - Read previously generated code for use case UC1: 
```javascript
import { test, expect } from '@playwright/test';
import { LoginPage } from '../models/login-page';
import { TestResultReporter } from "../models/test-result-reporter";

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

    const loginPage = new LoginPage(page);

    // Step 1: Inserisci le credenziali corrette nel form di login
    const email = process.env.E2E_LOGIN_EMAIL_ADMIN;
    const password = process.env.E2E_LOGIN_PASSWORD_ADMIN;
    await loginPage.displayLoginForm();
    await loginPage.enterEmail(email);
    await loginPage.enterPassword(password);

    const expectedResults = "Le credenziali vengono accettate";
    const actualResults = "Credenziali inserite correttamente";
    const passFail = true;
    const parametersUsed = `email: ${email}, password: ${password}`;
    const executionTime = new Date().getTime();
    reporter.addStep('UC1_TC1_ID1', 'Inserisci le credenziali corrette nel form di login', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // Step 2: Clicca il tasto “Login”
    await loginPage.login();

    const expectedResults2 = "Il sistema procede con l’autenticazione";
    const actualResults2 = "Tasto Login cliccato correttamente";
    const passFail2 = true;
    const parametersUsed2 = "";
    const executionTime2 = new Date().getTime();
    reporter.addStep('UC1_TC1_ID2', 'Clicca il tasto “Login”', expectedResults2, actualResults2, passFail2, parametersUsed2, executionTime2);

    // Step 3: Verifica la visualizzazione del messaggio di successo
    const errorMessage = await loginPage.getErrorMessage();
    if (errorMessage === null) {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = "Messaggio di successo visualizzato correttamente";
        const passFail3 = true;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    } else {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = `Errore: ${errorMessage}`;
        const passFail3 = false;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    }

    reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/raw.txt
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file dashboard_page.js: 
export class DashboardPage {
    readonly page: Page;
    readonly downloadButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.downloadButton = page.getByRole('button', { name: 'Download PDF' });
    }

    async downloadPdf() {
        await this.downloadButton.click();
    }
  }
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file login_page.js: 
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file home_page.js: 
export class HomePage {
    readonly page: Page;
    readonly dashboardButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: ' Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }
  }
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-16 12:44:41,665 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
export class DashboardPage {
    readonly page: Page;
    readonly downloadButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.downloadButton = page.getByRole('button', { name: 'Download PDF' });
    }

    async downloadPdf() {
        await this.downloadButton.click();
    }
  }export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }export class HomePage {
    readonly page: Page;
    readonly dashboardButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: ' Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }
  }

Use the following test parameters when creating test script:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, insert this piece of code:
```javascript
import { test, expect } from '@playwright/test';
import { LoginPage } from '../models/login-page';
import { TestResultReporter } from "../models/test-result-reporter";

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

    const loginPage = new LoginPage(page);

    // Step 1: Inserisci le credenziali corrette nel form di login
    const email = process.env.E2E_LOGIN_EMAIL_ADMIN;
    const password = process.env.E2E_LOGIN_PASSWORD_ADMIN;
    await loginPage.displayLoginForm();
    await loginPage.enterEmail(email);
    await loginPage.enterPassword(password);

    const expectedResults = "Le credenziali vengono accettate";
    const actualResults = "Credenziali inserite correttamente";
    const passFail = true;
    const parametersUsed = `email: ${email}, password: ${password}`;
    const executionTime = new Date().getTime();
    reporter.addStep('UC1_TC1_ID1', 'Inserisci le credenziali corrette nel form di login', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // Step 2: Clicca il tasto “Login”
    await loginPage.login();

    const expectedResults2 = "Il sistema procede con l’autenticazione";
    const actualResults2 = "Tasto Login cliccato correttamente";
    const passFail2 = true;
    const parametersUsed2 = "";
    const executionTime2 = new Date().getTime();
    reporter.addStep('UC1_TC1_ID2', 'Clicca il tasto “Login”', expectedResults2, actualResults2, passFail2, parametersUsed2, executionTime2);

    // Step 3: Verifica la visualizzazione del messaggio di successo
    const errorMessage = await loginPage.getErrorMessage();
    if (errorMessage === null) {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = "Messaggio di successo visualizzato correttamente";
        const passFail3 = true;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    } else {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = `Errore: ${errorMessage}`;
        const passFail3 = false;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    }

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the reporter object methods as in the example below.
5. Put the code in functions for reusability
6. Add the required import for Playwright and TestResultReporter from "../models/test-result-reporter"

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC1
Title: Apertura della dashboard con utente autorizzato
Use Case ID: UC2
Priority: Alta
Type: Positivo
Preconditions: UC1
Postconditions: L’utente visualizza la sezione relativa alla dashboard
Test Steps:
  1. Step: Accedi al sistema come utente registrato
Expected: La home page del sistema viene visualizzata
  2. Step: Seleziona la voce di menù per accedere alla dashboard
Expected: La sezione della dashboard si apre correttamente

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it. Generate only one test script.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-16 12:44:41,665 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
2025-05-16 12:47:27,893 - httpx - INFO - HTTP Request: POST http://127.0.0.1:11434/api/generate "HTTP/1.1 200 OK"
2025-05-16 12:47:27,894 - test_code_generator.llm_client.ollama_client - INFO - Ollama responded with: 
 

```javascript
import { test, expect } from '@playwright/test';
import { LoginPage } from '../models/login-page';
import { HomePage } from '../models/home-page';
import { DashboardPage } from '../models/dashboard-page';
import { TestResultReporter } from "../models/test-result-reporter";

test("UC2_TC1 - Apertura della dashboard con utente autorizzato", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC2_TC1 - Apertura della dashboard con utente autorizzato");

    // Step 1: Accedi al sistema come utente registrato
    const loginPage = new LoginPage(page);
    const email = process.env.E2E_LOGIN_EMAIL_ADMIN;
    const password = process.env.E2E_LOGIN_PASSWORD_ADMIN;
    await loginPage.displayLoginForm();
    await loginPage.enterEmail(email);
    await loginPage.enterPassword(password);
    await loginPage.login();

    const expectedResults1 = "La home page del sistema viene visualizzata";
    const actualResults1 = "Home page visualizzata correttamente";
    const passFail1 = true;
    const parametersUsed1 = `email: ${email}, password: ${password}`;
    const executionTime1 = new Date().getTime();
    reporter.addStep('UC2_TC1_ID1', 'Accedi al sistema come utente registrato', expectedResults1, actualResults1, passFail1, parametersUsed1, executionTime1);

    // Step 2: Seleziona la voce di menù per accedere alla dashboard
    const homePage = new HomePage(page);
    await homePage.navigateToDashboard();

    const dashboardPage = new DashboardPage(page);
    const expectedResults2 = "La sezione della dashboard si apre correttamente";
    const actualResults2 = "Dashboard aperta correttamente";
    const passFail2 = true;
    const parametersUsed2 = "";
    const executionTime2 = new Date().getTime();
    reporter.addStep('UC2_TC1_ID2', 'Seleziona la voce di menù per accedere alla dashboard', expectedResults2, actualResults2, passFail2, parametersUsed2, executionTime2);

    reporter.onTestEnd(test, { status: "passed" });
});
```
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt template loaded from path: ./prompts/single_processing/zero_shot/raw.txt
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Test parameters loaded from path: ./input_files/parameters/test_parameters.env
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file dashboard_page.js: 
export class DashboardPage {
    readonly page: Page;
    readonly downloadButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.downloadButton = page.getByRole('button', { name: 'Download PDF' });
    }

    async downloadPdf() {
        await this.downloadButton.click();
    }
  }
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file login_page.js: 
export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Read pom file home_page.js: 
export class HomePage {
    readonly page: Page;
    readonly dashboardButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: ' Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }
  }
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Test reporter loaded from path: ./input_files/reporter_minimal.js
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Previous code section loaded from path: ./input_files/reporter_minimal.js
2025-05-16 12:47:27,894 - test_code_generator.prompt_builder.prompt_builder - INFO - Prompt built: <|begin_of_text|><|start_header_id|>system<|end_header_id|>
You are a testing engineer, expert in writing Javascript end-to-end tests with Playwright.

Task: Analyze the test case provided below and generate a complete and working Playwright test script in Javascript, following the steps described in the test case.
When creating the test script, use only the page object model provided for interacting with the DOM and the parameters provided.
<|eot_id|>
<|start_header_id|>user<|end_header_id|>
Use only this page object models for interacting with the DOM:
export class DashboardPage {
    readonly page: Page;
    readonly downloadButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.downloadButton = page.getByRole('button', { name: 'Download PDF' });
    }

    async downloadPdf() {
        await this.downloadButton.click();
    }
  }export class LoginPage {
    readonly page: Page;
    readonly emailInput: Locator;
    readonly passwordInput: Locator;
    readonly loginButton: Locator;
    readonly authenticate: Locator;
    readonly errorMessage: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.loginButton = page.locator('text="Login"');
      this.emailInput = page.locator('#email');
      this.passwordInput = page.locator('#password');
      this.authenticate = page.locator("#submit");
      this.errorMessage = page.locator('.error-message');
    }
  
    async displayLoginForm() {
        await this.loginButton.click();
    }
  
    async enterEmail(email) {
        await this.emailInput.fill(email);
    }
  
    async enterPassword(password) {
        await this.passwordInput.fill(password);
    }
  
    async getErrorMessage() {
        return await this.errorMessage.textContent();
    }

    async login() {
        await this.authenticate.click();
    }
  }export class HomePage {
    readonly page: Page;
    readonly dashboardButton: Locator;
  
    constructor(page: Page) {
      this.page = page;
      this.dashboardButton = page.getByRole('link', { name: ' Dashboard' });
    }

    async navigateToDashboard() {
        await this.dashboardButton.click();
    }
  }

Use the following test parameters when creating test script:
E2E_BASE_URL="http://pell-portal.bologna.enea.it/"
E2E_LOGIN_URL="https://idp.smartcityplatform.enea.it/"
E2E_HOME_URL="" 
E2E_DASHBOARD_URL="" 
E2E_CTS_URL="" 
E2E_LOGIN_EMAIL_ADMIN="test.admin@pell.it"
E2E_LOGIN_PASSWORD_ADMIN="Testadmin01!"
E2E_LOGIN_EMAIL_REGION="test.region@pell.it"
E2E_LOGIN_PASSWORD_REGION="Testregion01!"

When in the test case there is a step, a precondition or a postcondition with a name of use case UC*, insert this piece of code:
```javascript
import { test, expect } from '@playwright/test';
import { LoginPage } from '../models/login-page';
import { TestResultReporter } from "../models/test-result-reporter";

test("UC1_TC1 - Login con credenziali valide", async ({ page, browserName }) => {
    const reporter = new TestResultReporter();
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login con credenziali valide");

    const loginPage = new LoginPage(page);

    // Step 1: Inserisci le credenziali corrette nel form di login
    const email = process.env.E2E_LOGIN_EMAIL_ADMIN;
    const password = process.env.E2E_LOGIN_PASSWORD_ADMIN;
    await loginPage.displayLoginForm();
    await loginPage.enterEmail(email);
    await loginPage.enterPassword(password);

    const expectedResults = "Le credenziali vengono accettate";
    const actualResults = "Credenziali inserite correttamente";
    const passFail = true;
    const parametersUsed = `email: ${email}, password: ${password}`;
    const executionTime = new Date().getTime();
    reporter.addStep('UC1_TC1_ID1', 'Inserisci le credenziali corrette nel form di login', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // Step 2: Clicca il tasto “Login”
    await loginPage.login();

    const expectedResults2 = "Il sistema procede con l’autenticazione";
    const actualResults2 = "Tasto Login cliccato correttamente";
    const passFail2 = true;
    const parametersUsed2 = "";
    const executionTime2 = new Date().getTime();
    reporter.addStep('UC1_TC1_ID2', 'Clicca il tasto “Login”', expectedResults2, actualResults2, passFail2, parametersUsed2, executionTime2);

    // Step 3: Verifica la visualizzazione del messaggio di successo
    const errorMessage = await loginPage.getErrorMessage();
    if (errorMessage === null) {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = "Messaggio di successo visualizzato correttamente";
        const passFail3 = true;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    } else {
        const expectedResults3 = "Viene mostrato un messaggio che conferma l’avvenuta autenticazione";
        const actualResults3 = `Errore: ${errorMessage}`;
        const passFail3 = false;
        const parametersUsed3 = "";
        const executionTime3 = new Date().getTime();
        reporter.addStep('UC1_TC1_ID3', 'Verifica la visualizzazione del messaggio di successo', expectedResults3, actualResults3, passFail3, parametersUsed3, executionTime3);
    }

    reporter.onTestEnd(test, { status: "passed" });
});
```

Instructions:
1. Analyze the test case provided
2. For the test case, generate a test script in Javascript with Playwright
3. Use only Page object model provided to interact with the DOM.
4. Call the reporter object methods as in the example below.
5. Put the code in functions for reusability
6. Add the required import for Playwright and TestResultReporter from "../models/test-result-reporter"

<example>
test("UC1_TC1 - Login test with success", async ({page, browserName}) => {
    reporter.setBrowserName(browserName);
    reporter.setTestCase("UC1_TC1 - Login test with success");

    // ... test case step 1
    reporter.addStep('UC1_TC1_ID1', 'Step 1 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ... test case step 2
    reporter.addStep('UC1_TC1_ID2', 'Step 2 description', expectedResults, actualResults, passFail, parametersUsed, executionTime);

    // ...

    reporter.onTestEnd(test, { status: "passed" });
});
</example>

Here the test case to be converted in Playwright script:
Test Case ID: UC2_TC2
Title: Tentativo di accesso alla dashboard senza autorizzazione
Use Case ID: UC2
Priority: Media
Type: Negativo
Preconditions: UC1
Postconditions: L’accesso alla dashboard viene negato
Test Steps:
  1. Step: Accedi al sistema come ospite o utente non registrato
Expected: La home page del sistema viene visualizzata
  2. Step: Tenta di accedere direttamente alla dashboard tramite URL
Expected: Viene mostrata una pagina di accesso negato

Generate only JavaScript code. Do not include existing code implementation in the response, only reference it. Generate only one test script.
<|eot_id|>
<|start_header_id|>assistant<|end_header_id|>
2025-05-16 12:47:27,894 - test_code_generator.llm_client.ollama_client - INFO - OllamaClient initialized with model: llama3.3
